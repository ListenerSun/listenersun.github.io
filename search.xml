<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot深度理解之自动配置</title>
    <url>/2020/05/18/SpringBoot%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ol>
<li><strong>使用SpringBoot很久了，自动装配到底是咋回事?</strong></li>
<li><strong>我能不能自己撸一个自动装配配置类出来?</strong></li>
</ol>
<h4 id="自动装配底层技术"><a href="#自动装配底层技术" class="headerlink" title="自动装配底层技术"></a>自动装配底层技术</h4><p>其实SpringBoot也不是什么新框架，只是站在Spring的基础上进一步进行了封装，让我们更专注于业务开发。先来说下SpringBoot中自动装配使用到了SpringFramework那些的技术模块：</p>
<ul>
<li><p>Spring 模式注解装配 : 比如 <code>@Configuration</code>、<code>@Component</code>这一类的注解</p>
</li>
<li><p>Spring @Enable 模块装配 : 比如<code>@EnableWebMvc</code>、<code>@EnableEurekaServer</code>这一类的注解</p>
</li>
<li><p>Spring 条件装配: 可以基于<code>@Conditional</code>注解来实现，demo中会有案例</p>
</li>
<li><p>Spring 工厂加载机制</p>
<ol>
<li><p>实现类： <code>SpringFactoriesLoader</code> ，用来加载<code>spring.factories</code>文件</p>
</li>
<li><p>配置资源：<code>META-INF/spring.factories</code>，SpringBoot所有默认自动配置的类都在这个文件中，如下图:</p>
<p><img src="/2020/05/18/SpringBoot%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/spring-factories.png" alt="image-20200518175455587"></p>
<a id="more"></a>

</li>
</ol>
</li>
</ul>
<h3 id="自己编写一个HelloWorldAutofiguration"><a href="#自己编写一个HelloWorldAutofiguration" class="headerlink" title="自己编写一个HelloWorldAutofiguration"></a>自己编写一个HelloWorldAutofiguration</h3><p>前边介绍了实现一个自动装配配置类用到了哪些技术。那下面我就可以自己写一个<code>HelloWorldAutoConfiguration</code>了。</p>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构:"></a>项目结构:</h4><p><img src="/2020/05/18/SpringBoot%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png" alt="image-20200518180133111"></p>
<p>主要就是<code>HelloWorldAutoConfiguration</code>、<code>OnConditionSystem</code>、<code>HelloWorldImportSelector</code>、<code>HelloWorldConfiguration</code>、<code>@EnableHelloWold</code>、<code>@ConditionOnSystem</code>、<code>spring.factories</code>四个类两个注解和一个文件。下面一个一个的介绍。</p>
<h4 id="HelloWorldConfiguration"><a href="#HelloWorldConfiguration" class="headerlink" title="HelloWorldConfiguration:"></a><code>HelloWorldConfiguration</code>:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hellWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">" ListenerSun hello world !"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类就是要被自动装配的类。该类并没有使用<code>@Configuration</code>注解，并且在该类里配置了一个HelloWorld的bean</p>
<h4 id="OnConditionSystem、-ConditionOnSystem："><a href="#OnConditionSystem、-ConditionOnSystem：" class="headerlink" title="OnConditionSystem、@ConditionOnSystem："></a><code>OnConditionSystem</code>、<code>@ConditionOnSystem</code>：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 自定义  条件属性注解 满足该条件才 进行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: java系统属性 条件判断</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 2020-04-26 11:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(OnConditionSystem<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">ConditionOnSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** java 系统属性名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**java 系统属性值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 判断实际类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 2020-04-26 11:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnConditionSystem</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes = metadata.getAnnotationAttributes(ConditionOnSystem<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">        <span class="comment">//获取注解中 name 的值</span></span><br><span class="line">        String propertyName = String.valueOf(annotationAttributes.get(<span class="string">"name"</span>));</span><br><span class="line">         <span class="comment">//获取注解中 value 的值</span></span><br><span class="line">        String propertyValue = String.valueOf(annotationAttributes.get(<span class="string">"value"</span>));</span><br><span class="line">        <span class="comment">//获取系统属性为 name 的 值</span></span><br><span class="line">        String systemPropertyValue = System.getProperty(propertyName);</span><br><span class="line">        <span class="keyword">return</span> propertyValue.equalsIgnoreCase(systemPropertyValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一组相当于是自定义的条件注解，其中判断条件就是我们配置的value是否和系统属性的value值是否相等。</p>
<h4 id="HelloWorldImportSelector、-EnableHelloWold"><a href="#HelloWorldImportSelector、-EnableHelloWold" class="headerlink" title="HelloWorldImportSelector、@EnableHelloWold:"></a><code>HelloWorldImportSelector</code>、<code>@EnableHelloWold</code>:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(HelloWorldImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableHelloWold</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;HelloWorldConfiguration<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()&#125;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@EnableHelloWold 注解就是我们添加到启动类上的注解，开启自动适配，类似@EnableEurekaServer、@EnableFeignClients 这种注解。其中使用了@Import注解，其中实现逻辑在<code>HelloWorldImportSelector</code>中。这里简单说一下@Import：</p>
<h5 id="Import支持-三种方式"><a href="#Import支持-三种方式" class="headerlink" title="@Import支持 三种方式"></a><code>@Import</code>支持 三种方式</h5><ol>
<li>带有<code>@Configuration</code>的配置类(<strong>4.2 版本之前只可以导入配置类，4.2版本之后 也可以导入 普通类</strong>)</li>
<li><code>ImportSelector</code> 的实现。<strong>案例:<code>@ EnableAsync</code></strong></li>
<li><code>ImportBeanDefinitionRegistrar</code> 的实现。<strong>案例:<code>@EnableFeignClients</code></strong></li>
</ol>
<p>我们使用的是第二种方式，使用方法就是:</p>
<ol>
<li>实现spring的<code>ImportSelector</code>接口，重写<code>selectImports</code>方法，方法的返回值是一个String数组，数组中包含的全类名会被注册到容器中容器中最终注册的组建是返回的全类名，而当前的 <code>HelloWorldImportSelector</code> 不会被导入到容器中</li>
<li>重写<code>selectImports</code>方法. 可以返回 空数组,不能返回 Null</li>
</ol>
<h4 id="spring-factories"><a href="#spring-factories" class="headerlink" title="spring.factories"></a><code>spring.factories</code></h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.sqt.heap.springboot.enableautoconfigure.HelloWorldAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<p>自己新建一个<code>META-INF</code>文件夹，然后新建一个<code>spring.factories</code>文件，模仿SpringBoot中的<code>spring.factories</code>文件，把自己的<code>HelloWorldAutoConfiguration</code>类配进去。然后在项目启动的时候<code>SpringFactoriesLoader</code> 这个实现类会自动帮我们解析加载我们自定义的文件，详情可点进源码去看。</p>
<h4 id="HelloWorldAutoConfiguration"><a href="#HelloWorldAutoConfiguration" class="headerlink" title="HelloWorldAutoConfiguration:"></a><code>HelloWorldAutoConfiguration</code>:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ListenerSun(男, 未婚) 微信:810548252</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 2020-04-29 14:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>  <span class="comment">// spring 模式注解装配</span></span><br><span class="line"><span class="meta">@EnableHelloWold</span> <span class="comment">// enable 模块装配</span></span><br><span class="line"><span class="meta">@ConditionOnSystem</span>(name = <span class="string">"user.name"</span>, value = <span class="string">"Administrator"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是我们HelloWorld的自动配置类，跟<code>MybatisAutoConfiguration</code>、<code>FeignAutoConfiguration</code>这些类的命名保持一致。如果条件注解符合，就会为我们自动装配<code>HelloWorldConfiguration</code>中的HelloWorld的bean。因为我电脑属性值是<code>Administrator</code>，所以我条件注解中的value是<code>Administrator</code>。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ListenerSun(男, 未婚) 微信:810548252</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: Created in 2020-04-29 14:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldEnableAutoConfigurationBootStrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(HelloWorldEnableAutoConfigurationBootStrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">        String bean = context.getBean(<span class="string">"hellWorld"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"获取到的 hello world bean 是:"</span> + bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<p><img src="/2020/05/18/SpringBoot%E4%B9%8B%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="image-20200519085817556"></p>
<p>可以看到 HelloWorld  bean自动配置成功了。到此一个自动装配类就完成了</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>   概括一个自动装配类的实现顺序:</p>
<ol>
<li>实现一个自己的<code>xxxAutoConfiguration</code></li>
<li>将自己实现的<code>xxxAutoConfiguration</code>配置到 <code>spring.factories</code></li>
<li>激活自动装配。 就是在在启动类上开启自动配置注解<code>@EnableAutoConfiguration</code></li>
<li><code>HelloWorldAutoConfiguration</code>例子详解:<ol>
<li>启动类开启了自动装配会扫描spring.factories文件，然后扫描到自己实现的配置类</li>
<li>自己实现的配置类又导入了<code>@EnableHelloWold</code> 和 <code>@ConditionOnSystem</code></li>
<li>在<code>@EnableHelloWorld</code>中使用了<code>@Import注解</code>导入了<code>HelloWorldImportSelector</code>类</li>
<li>在<code>HelloWorldImportSelector</code>中返回类<code>HelloWorldConfiguration类</code>其中在<code>HelloWorldConfiguration</code>中配置了 <code>Hellworld</code>Bean</li>
<li>在<code>@ConditionOnSystem</code>中实现了条件校验的逻辑</li>
</ol>
</li>
</ol>
<center><h2>欢迎扫码关注</h2></center>

<blockquote>
<p> 如果喜欢请关注我公众号【程序倾听者】，说出你的故事！我在这里倾听！<br> <img src="/images/public-wechat.jpg"> </p>
</blockquote>
]]></content>
      <categories>
        <category>Java后端</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2.X+MybatisPlus+多数据源+事务</title>
    <url>/2020/05/14/SpringBoot2/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><ol>
<li><strong>项目中用不用多数据源是一回事，你自己会不会又是另一回事。</strong></li>
<li><strong>SpringBoot2.0.8版本整合MybatisPlus实现多数据源很简单，但是事务总是不生效？</strong></li>
<li><strong>MybatisPlus提供了多数据源插件(<a href="https://mp.baomidou.com/guide/dynamic-datasource.html" target="_blank" rel="noopener" title="With a Title">链接</a>)，我可不可以不用?</strong></li>
<li><strong>其实多数据源挺好配的，就是事务一直不生效。今天终于解决了。</strong><a id="more"></a>

</li>
</ol>
<h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构:"></a>项目结构:</h5><p><img src="/2020/05/14/SpringBoot2/1.jpg" alt="xxx"></p>
<p>主要的配置类就是这五个: DsAspect、 DataSourceConfiguration 、MyRoutingDataSource、MybatisConfiguration、TransactionConfig。后面我逐个的解释下每个类的作用。</p>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件:"></a><strong>配置文件:</strong></h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据源配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">defaultDs:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">master</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:3306/wx_edu?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="attr">initial-size:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="string">version()</span></span><br><span class="line">        <span class="attr">validation-query-timeout:</span> <span class="number">10000</span></span><br><span class="line">        <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">remove-abandoned:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">remove-abandoned-timeout:</span> <span class="number">86400</span></span><br><span class="line">        <span class="attr">filters:</span> <span class="string">stat,wall</span></span><br><span class="line">        <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql=true;</span></span><br><span class="line">        <span class="attr">web-stat-filter:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">          <span class="attr">exclusions:</span> <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span></span><br><span class="line">        <span class="attr">stat-view-servlet:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">          <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">          <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">filter:</span></span><br><span class="line">          <span class="attr">stat:</span></span><br><span class="line">            <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">            <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">wall:</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">              <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># slave 数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">slave</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:3307/wx_edu?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="comment">#连接参数</span></span><br><span class="line">        <span class="attr">initial-size:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="string">version()</span></span><br><span class="line">        <span class="attr">validation-query-timeout:</span> <span class="number">10000</span></span><br><span class="line">        <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">remove-abandoned:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">remove-abandoned-timeout:</span> <span class="number">86400</span></span><br><span class="line">        <span class="attr">filters:</span> <span class="string">stat,wall</span></span><br><span class="line">        <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql=true;</span></span><br><span class="line">        <span class="attr">web-stat-filter:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">          <span class="attr">exclusions:</span> <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span></span><br><span class="line">        <span class="attr">stat-view-servlet:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">          <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">          <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">filter:</span></span><br><span class="line">          <span class="attr">stat:</span></span><br><span class="line">            <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">            <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">wall:</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">              <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="comment">#主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";</span></span><br><span class="line">    <span class="attr">id-type:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">#字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"</span></span><br><span class="line">    <span class="attr">field-strategy:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">#驼峰下划线转换</span></span><br><span class="line">    <span class="attr">db-column-underline:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#刷新mapper 调试神器</span></span><br><span class="line">    <span class="attr">refresh-mapper:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#数据库大写下划线转换</span></span><br><span class="line">    <span class="comment">#capital-mode: true</span></span><br><span class="line">    <span class="comment">#逻辑删除配置（下面3个配置）</span></span><br><span class="line">    <span class="attr">logic-delete-value:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">logic-not-delete-value:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># SQL 解析缓存，开启后多租户 @SqlParser 注解生效</span></span><br><span class="line">  <span class="comment">#    sql-parser-cache: true</span></span><br></pre></td></tr></table></figure>

<h6 id="DataSourceConfiguration"><a href="#DataSourceConfiguration" class="headerlink" title="DataSourceConfiguration:"></a>DataSourceConfiguration:</h6><p> 主要是配置多个数据源的Bean，上代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认是数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.druid.defaultDs&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String defaultDs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSourceMaster"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid.master"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourceMaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource druidDataSource = DruidDataSourceBuilder.create().build();</span><br><span class="line">        DbContextHolder.addDataSource(CommonEnum.DsType.DS_MASTER.getValue(), druidDataSource);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSourceSlave"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid.slave"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourceSlave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource druidDataSource = DruidDataSourceBuilder.create().build();</span><br><span class="line">        DbContextHolder.addDataSource(CommonEnum.DsType.DS_SLAVE.getValue(), druidDataSource);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"myRoutingDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyRoutingDataSource <span class="title">dataSource</span><span class="params">(@Qualifier(<span class="string">"dataSourceMaster"</span>)</span> DataSource dataSourceMaster, @<span class="title">Qualifier</span><span class="params">(<span class="string">"dataSourceSlave"</span>)</span> DataSource dataSourceSlave) </span>&#123;</span><br><span class="line">        MyRoutingDataSource dynamicDataSource = <span class="keyword">new</span> MyRoutingDataSource();</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataResources = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        targetDataResources.put(CommonEnum.DsType.DS_MASTER.getValue(), dataSourceMaster);</span><br><span class="line">        targetDataResources.put(CommonEnum.DsType.DS_SLAVE.getValue(), dataSourceSlave);</span><br><span class="line">        <span class="comment">//设置默认数据源</span></span><br><span class="line">        dynamicDataSource.setDefaultTargetDataSource(dataSourceMaster);</span><br><span class="line">        dynamicDataSource.setTargetDataSources(targetDataResources);</span><br><span class="line">        DbContextHolder.setDefaultDs(defaultDs);</span><br><span class="line">        <span class="keyword">return</span> dynamicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个没啥好解释的，就是把配置文件封装成了dataSource的Bean，其中<code>MyRoutingDataSource</code>才是我们要用的数据源，包括事务配置也要用它。</p>
<p> <strong>MyRoutingDataSource</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DbContextHolder.getCurrentDsStr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>AbstractRoutingDataSource</code>是Spring的jdbc模块下提供的一个抽象类，该类充当了<code>DataSource</code>的路由中介, 能在运行时, 根据某种key值来动态切换到真正的<code>DataSource</code>上，重写其中的<code>determineCurrentLookupKey()</code>方法，可以实现数据源的切换。意思就是想玩多数据源就使用这个类就对了。我这里还用到了一个<code>DbContextHolder</code>工具类(相当于数据源的持有者)，代码如下，基本上是在网上拷贝的，其中做了一点点修改:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbContextHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目中配置数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, DataSource&gt; dataSources = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String defaultDs = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为什么要用链表存储(准确的是栈)</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * 为了支持嵌套切换，如ABC三个service都是不同的数据源</span></span><br><span class="line"><span class="comment">     * 其中A的某个业务要调B的方法，B的方法需要调用C的方法。一级一级调用切换，形成了链。</span></span><br><span class="line"><span class="comment">     * 传统的只设置当前线程的方式不能满足此业务需求，必须模拟栈，后进先出。</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Deque&lt;String&gt;&gt; contextHolder = <span class="keyword">new</span> ThreadLocal() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayDeque();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前线程使用的数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dsName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCurrentDsStr</span><span class="params">(String dsName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(dsName)) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;dbType is null,throw NullPointerException"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!dataSources.containsKey(dsName)) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;datasource not exists,dsName=&#123;&#125;"</span>, dsName);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"==========&gt;datasource not exists,dsName=&#123;"</span> + dsName +<span class="string">"&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        contextHolder.get().push(dsName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前使用的数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentDsStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contextHolder.get().peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空当前线程数据源</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 如果当前线程是连续切换数据源</span></span><br><span class="line"><span class="comment">     * 只会移除掉当前线程的数据源名称</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearCurrentDsStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Deque&lt;String&gt; deque = contextHolder.get();</span><br><span class="line">        deque.poll();</span><br><span class="line">        <span class="keyword">if</span> (deque.isEmpty())&#123;</span><br><span class="line">            contextHolder.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dsName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addDataSource</span><span class="params">(String dsName, DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSources.containsKey(dsName)) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;dataSource=&#123;&#125; already exist"</span>, dsName);</span><br><span class="line">            <span class="comment">//throw new RuntimeException("dataSource=&#123;" + dsName + "&#125; already exist");</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dataSources.put(dsName, dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDefaultDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(defaultDs)) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;default datasource must be configured"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"default datasource must be configured."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!dataSources.containsKey(defaultDs)) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;The default datasource must be included in the datasources"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"==========&gt;The default datasource must be included in the datasources"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSources.get(defaultDs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 设置默认数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultDsStr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefaultDs</span><span class="params">(String defaultDsStr)</span> </span>&#123;</span><br><span class="line">        defaultDs = defaultDsStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**获取所有 数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, DataSource&gt; <span class="title">getDataSources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDefaultDs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defaultDs;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="MybatisConfiguration："><a href="#MybatisConfiguration：" class="headerlink" title="MybatisConfiguration："></a>MybatisConfiguration：</h6><p>这是MybatisPlus配置类，如果你用的是Mybatis要简单一点。因为Mybatis只需要配置<code>SqlSessionFactory</code>，而 MybatisPlus是配置<code>MybatisSqlSessionFactoryBean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123;DataSourceConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">MapperScan</span>(<span class="title">basePackages</span> </span>= &#123;<span class="string">"com.sqt.edu.*.mapper*"</span>,<span class="string">"com.sqt.edu.*.api.mapper*"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(@Qualifier(value = <span class="string">"myRoutingDataSource"</span>)</span> MyRoutingDataSource myRoutingDataSource) <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">            Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(myRoutingDataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"mybatisSqlSessionFactoryBean"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisSqlSessionFactoryBean <span class="title">sqlSessionFactoryBean</span><span class="params">(@Qualifier(value = <span class="string">"myRoutingDataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"==========&gt;开始注入 MybatisSqlSessionFactoryBean"</span>);</span><br><span class="line">        MybatisSqlSessionFactoryBean bean = <span class="keyword">new</span> MybatisSqlSessionFactoryBean();</span><br><span class="line">        Set&lt;Resource&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        PathMatchingResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result.addAll(Arrays.asList(resolver.getResources(<span class="string">"classpath*:mapper/*.xml"</span>)));</span><br><span class="line">            result.addAll(Arrays.asList(resolver.getResources(<span class="string">"classpath*:config/mapper/*/*.xml"</span>)));</span><br><span class="line">            result.addAll(Arrays.asList(resolver.getResources(<span class="string">"classpath*:mapper/*/*.xml"</span>)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"获取【classpath:mapper/*/*.xml,classpath:config/mapper/*/*.xml】资源错误!异常信息:&#123;&#125;"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        bean.setMapperLocations(result.toArray(<span class="keyword">new</span> org.springframework.core.io.Resource[<span class="number">0</span>]));</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setVfs(SpringBootVFS<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        com.baomidou.mybatisplus.core.MybatisConfiguration configuration = <span class="keyword">new</span> com.baomidou.mybatisplus.core.MybatisConfiguration();</span><br><span class="line">        configuration.setLogImpl(StdOutImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//添加 乐观锁插件</span></span><br><span class="line">        configuration.addInterceptor(optimisticLockerInterceptor());</span><br><span class="line">        bean.setConfiguration(configuration);</span><br><span class="line">        GlobalConfig globalConfig = GlobalConfigUtils.defaults();</span><br><span class="line">        <span class="comment">//设置 字段自动填充处理</span></span><br><span class="line">        globalConfig.setMetaObjectHandler(<span class="keyword">new</span> MyMetaObjectHandler());</span><br><span class="line">        bean.setGlobalConfig(globalConfig);</span><br><span class="line">        log.info(<span class="string">"==========&gt;注入 MybatisSqlSessionFactoryBean 完成!"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这里配置的<code>SqlSessionFactory</code>和<code>MybatisSqlSessionFactoryBean</code>都需要<code>MyRoutingDataSource</code>这个数据源。</strong></p>
<h6 id="DsAspect："><a href="#DsAspect：" class="headerlink" title="DsAspect："></a>DsAspect：</h6><p>数据源切换切面配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Order</span>(<span class="number">0</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DsAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置AOP切面的切入点</span></span><br><span class="line"><span class="comment">     * 切换放在service接口的方法上</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sqt..service..*Service.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataSourcePointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据切点信息获取调用函数是否用TargetDataSource切面注解描述，</span></span><br><span class="line"><span class="comment">     * 如果设置了数据源，则进行数据源切换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"dataSourcePointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(DbContextHolder.getCurrentDsStr())) &#123;</span><br><span class="line">            log.info(<span class="string">"==========&gt;current thread &#123;&#125; use dataSource[&#123;&#125;]"</span>,</span><br><span class="line">                    Thread.currentThread().getName(), DbContextHolder.getCurrentDsStr());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String method = joinPoint.getSignature().getName();</span><br><span class="line">        Method m = ((MethodSignature) joinPoint.getSignature()).getMethod();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != m &amp;&amp; m.isAnnotationPresent(DS<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                <span class="comment">// 根据注解 切换数据源</span></span><br><span class="line">                DS td = m.getAnnotation(DS<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                String dbStr = td.value();</span><br><span class="line">                DbContextHolder.setCurrentDsStr(dbStr);</span><br><span class="line">                log.info(<span class="string">"==========&gt;current thread &#123;&#125; add dataSource[&#123;&#125;] to ThreadLocal, request method name is : &#123;&#125;"</span>,</span><br><span class="line">                        Thread.currentThread().getName(), dbStr, method);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                DbContextHolder.setCurrentDsStr(DbContextHolder.getDefaultDs());</span><br><span class="line">                log.info(<span class="string">"==========&gt;use default datasource[&#123;&#125;] , request method name is :  &#123;&#125;"</span>,</span><br><span class="line">                        DbContextHolder.getDefaultDs(), method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;current thread &#123;&#125; add data to ThreadLocal error,&#123;&#125;"</span>, Thread.currentThread().getName(), e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行完切面后，将线程共享中的数据源名称清空，</span></span><br><span class="line"><span class="comment">     * 数据源恢复为原来的默认数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"dataSourcePointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"==========&gt;clean datasource[&#123;&#125;]"</span>, DbContextHolder.getCurrentDsStr());</span><br><span class="line">        DbContextHolder.clearCurrentDsStr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类就是一个简单的切面配置，作用就是在Service方法之前切换数据源，自定义一个<code>DS()</code>注解,作用到Service方法上并且标明是master还是slave即可。</p>
<h6 id="事务配置"><a href="#事务配置" class="headerlink" title="事务配置:"></a>事务配置:</h6><p><strong>重点来了！重点来了!经过上面那些配置，多数据源已经配置好了。但是此时事务是不生效的，无论你是把<code>@Transactional</code>作用到Service类上还是方法上，都不生效!此时你还需要配置一个事务管理器，并且把<code>MyRoutingDataSource</code>我们自定义的数据源给事务管理器。看TransactionConfig:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ConfigurableApplicationContext applicationContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TX_METHOD_TIMEOUT = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_POINTCUT_EXPRESSION = <span class="string">"execution(*com.sqt..service..*Service.*(..))"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"txAdvice"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionInterceptor <span class="title">txAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        NameMatchTransactionAttributeSource source = <span class="keyword">new</span> NameMatchTransactionAttributeSource();</span><br><span class="line">        <span class="comment">// 只读事务，不做更新操作</span></span><br><span class="line">        RuleBasedTransactionAttribute readOnlyTx = <span class="keyword">new</span> RuleBasedTransactionAttribute();</span><br><span class="line">        readOnlyTx.setReadOnly(<span class="keyword">true</span>);</span><br><span class="line">        readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务</span></span><br><span class="line">        RuleBasedTransactionAttribute requiredTx = <span class="keyword">new</span> RuleBasedTransactionAttribute();</span><br><span class="line">        requiredTx.setRollbackRules(Collections.singletonList(<span class="keyword">new</span> RollbackRuleAttribute(Exception<span class="class">.<span class="keyword">class</span>)))</span>;</span><br><span class="line">        requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line">        requiredTx.setTimeout(TX_METHOD_TIMEOUT);</span><br><span class="line">        Map&lt;String, TransactionAttribute&gt; txMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        txMap.put(<span class="string">"add*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"save*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"insert*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"create*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"update*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"batch*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"modify*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"delete*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"remove*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"exec*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"set*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"do*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"get*"</span>, readOnlyTx);</span><br><span class="line">        txMap.put(<span class="string">"query*"</span>, readOnlyTx);</span><br><span class="line">        txMap.put(<span class="string">"find*"</span>, readOnlyTx);</span><br><span class="line">        txMap.put(<span class="string">"*"</span>, requiredTx);</span><br><span class="line">        source.setNameMap(txMap);</span><br><span class="line">        TransactionInterceptor txAdvice = <span class="keyword">new</span> TransactionInterceptor(transactionManager(), source);</span><br><span class="line">        <span class="keyword">return</span> txAdvice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Advisor <span class="title">txAdviceAdvisor</span><span class="params">(@Qualifier(<span class="string">"txAdvice"</span>)</span> TransactionInterceptor txAdvice) </span>&#123;</span><br><span class="line">        AspectJExpressionPointcut pointcut = <span class="keyword">new</span> AspectJExpressionPointcut();</span><br><span class="line">        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(pointcut, txAdvice);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**自定义 事务管理器 管理我们自定义的 MyRoutingDataSource 数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager(applicationContext.getBean(MyRoutingDataSource<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置DataSourceTransactionManager是重点! ! ! 配置DataSourceTransactionManager是重点! ! !</strong></p>
<p>由于我是自定义的切面配置事务，所以这个代码略长。重点是配置事务管理器，并且把我们动态路由数据源(MyRoutingDataSource)交给事务管理器，这样我们的事务才会回滚！</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h5><ol>
<li>配置多数据源的重点是自定义一个数据源继承<code>AbstractRoutingDataSource</code>，并将多个数据源注册进去。</li>
<li>事务不生效原因是Spring的默认事务管理器没有接管我们自定义的数据源.解决方法是配置一个事务管理器将我们自定义的数据源塞给它</li>
</ol>
]]></content>
      <categories>
        <category>Java后端</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>【Listener的夜晚】—–-岁月不居，时节如流</title>
    <url>/2020/06/12/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-06-12/</url>
    <content><![CDATA[<h3 id="【Listener的夜晚】—–-岁月不居，时节如流"><a href="#【Listener的夜晚】—–-岁月不居，时节如流" class="headerlink" title="【Listener的夜晚】—–  岁月不居，时节如流"></a>【Listener的夜晚】—–  岁月不居，时节如流</h3><p>又是一个夜深人静的夜晚，窗外依然能断断续续听见车的鸣笛声。越来越发现自己的脑子不够用，很简单的问题要理解一遍又一遍。就在这一瞬间我感觉到了时间飞逝，或许是有些多愁善感，也或许是多虑了！但是在当今的这个时代，仍要坚守初心，方得始终！</p>
<p><img src="/2020/06/12/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-06-12/1.png" alt="listener"></p>
<p>风华最后都变成了一指流沙，但切莫白白苍老了你的年华！每天早上依然要说一声：“世界，你好！”</p>
]]></content>
      <categories>
        <category>Listener的夜晚</category>
      </categories>
      <tags>
        <tag>Listener的夜晚</tag>
        <tag>生活随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>这就算第一个Listener的夜晚吧</title>
    <url>/2020/05/16/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-05-16/</url>
    <content><![CDATA[<h3 id="为什么这算是第一个Listener的夜晚？"><a href="#为什么这算是第一个Listener的夜晚？" class="headerlink" title="为什么这算是第一个Listener的夜晚？"></a>为什么这算是第一个Listener的夜晚？</h3><p>已经记不清是有多少个夜晚，所以今天就算是第一个夜晚吧！貌似踏上卖码为生的道路之后就跟夜晚结下了深厚的友谊！一个带有深邃眼神的男子坐在出租屋里，终于把自己的博客初步完善！或许这是结束，或许这又是一个开始！</p>
<p><img src="/2020/05/16/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-05-16/1.jpg" alt="listener"></p>
<p>高楼万丈，灯火阑珊！哪一盏灯是为你点亮？而你又点亮了哪一盏灯？无论黑夜有多黑，第二天早上都要对世界说声：“世界，你好！”</p>
]]></content>
      <categories>
        <category>Listener的夜晚</category>
      </categories>
      <tags>
        <tag>Listener的夜晚</tag>
        <tag>生活随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>【Listener的夜晚】—–-月光还是少年的月光</title>
    <url>/2020/07/17/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-07-17/</url>
    <content><![CDATA[<h3 id="【Listener的夜晚】—–-月光还是少年的月光"><a href="#【Listener的夜晚】—–-月光还是少年的月光" class="headerlink" title="【Listener的夜晚】—–  月光还是少年的月光"></a>【Listener的夜晚】—–  月光还是少年的月光</h3><p>月光还是少年的月光，九州一色还是李白的霜。还是觉得自己太着急，很多事情心口不一，心里想的总是跟嘴里说的不一样。对待一些事情还是过于看重。但是我还是想让更多比我强大的人给我指出我的不足，不求能变成万人瞩目的大神，但求自己无愧！</p>
<p><img src="/2020/07/17/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-07-17/1.png" alt="listener"></p>
<p>如果你不能改变世界，那就让自己改变一些。但是在内心深处依然要保留自己曾经子黑夜中看到的那一束月光！</p>
]]></content>
      <categories>
        <category>Listener的夜晚</category>
      </categories>
      <tags>
        <tag>Listener的夜晚</tag>
        <tag>生活随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>【Listener的夜晚】—–-如果实力不在是底牌</title>
    <url>/2020/07/30/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-07-30/</url>
    <content><![CDATA[<h3 id="【Listener的夜晚】—–-如果实力不在是底牌"><a href="#【Listener的夜晚】—–-如果实力不在是底牌" class="headerlink" title="【Listener的夜晚】—–  如果实力不在是底牌"></a>【Listener的夜晚】—–  如果实力不在是底牌</h3><p>一直以为自己学习能力很强！自己很爱学！一直以为自己的学习方式也是正确的！一直以为……这一切的以为在最近的工作中让我意识到自己的以为或许是错的！最可怕的不是你不会了，而是你开始怀疑自己，怀疑自己以前的一切可能都是错的，大大的摧毁你的自信，于是你变的唯唯诺诺！呈现出来的便是你不可靠！难受的一匹！以前总希望能跟着一位大神就好了，可是现在外在条件都具备了，可是自己却掉链子了。于是自己的实力不在是自己的底牌！吾日三省吾身！你与自己的期望或许差的不是你自己所认为的，而是你的能力就在那，你却不知怎么去成长！烦的要死！已经半个月没怎么好好学习了！就这样把！</p>
<p><img src="/2020/07/30/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-07-30/1.png" alt="listener"></p>
<p>如果实力不在是唯一的底牌，那希望自己保持一如既往的真诚！</p>
]]></content>
      <categories>
        <category>Listener的夜晚</category>
      </categories>
      <tags>
        <tag>Listener的夜晚</tag>
        <tag>生活随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>【Listener的夜晚】—–-不是所有的坚持都有结果</title>
    <url>/2020/09/01/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-09-01/</url>
    <content><![CDATA[<h3 id="【Listener的夜晚】—–-不是所有的坚持都有结果"><a href="#【Listener的夜晚】—–-不是所有的坚持都有结果" class="headerlink" title="【Listener的夜晚】—–  不是所有的坚持都有结果"></a>【Listener的夜晚】—–  不是所有的坚持都有结果</h3><p>不是所有的坚持都有结果！但总有一些坚持，能从一寸冰封的土地里培育出十万只怒放的蔷薇！无论工作也好、生活也好、爱情也好、友情也好！所有人或事物都可能会有离你而去的那一天！而唯一不会抛弃自己的只有自己！所以每个人请你好好善待自己，只希望在某一天一个你不讨厌的自己刚好对一个人说：“你好！好久不见！”</p>
<p><img src="/2020/09/01/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-09-01/1.png" alt="listener"></p>
<p>最近也是烦得很呐！不留恋！会想念！不遗憾！</p>
]]></content>
      <categories>
        <category>Listener的夜晚</category>
      </categories>
      <tags>
        <tag>Listener的夜晚</tag>
        <tag>生活随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>【Listener的夜晚】—–-白天也不一定会光亮</title>
    <url>/2020/11/14/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-11-14/</url>
    <content><![CDATA[<h3 id="【Listener的夜晚】—–-白天也不一定会光亮"><a href="#【Listener的夜晚】—–-白天也不一定会光亮" class="headerlink" title="【Listener的夜晚】—–  白天也不一定会光亮"></a>【Listener的夜晚】—–  白天也不一定会光亮</h3><p>额，原来很多的经历真的不仅仅是发生在你身上。但是确实没有真正的感同身受！今天感觉丧丧的，又要收拾收拾心情了！又得立flag！</p>
<p><img src="/2020/11/14/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-11-14/1.jpg" alt="listener"></p>
<p>如果白天也黑暗，那就让自己变成光！</p>
]]></content>
      <categories>
        <category>Listener的夜晚</category>
      </categories>
      <tags>
        <tag>Listener的夜晚</tag>
        <tag>生活随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>【Listener的夜晚】—–-你缺少的从来都不是能量，而是点燃你能量的那一束光！</title>
    <url>/2021/01/22/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2021-01-22/</url>
    <content><![CDATA[<h3 id="【Listener的夜晚】—–-你缺少的从来都不是能量，而是点燃你能量的那一束光！"><a href="#【Listener的夜晚】—–-你缺少的从来都不是能量，而是点燃你能量的那一束光！" class="headerlink" title="【Listener的夜晚】—–  你缺少的从来都不是能量，而是点燃你能量的那一束光！"></a>【Listener的夜晚】—–  你缺少的从来都不是能量，而是点燃你能量的那一束光！</h3><p>嗯……好像无论生活还是工作，在某一阶段都会有瓶颈期。于是你开始有点迷失自己，找不到了那份激情和冲动！转岗学C快一个月了，可是却一点成就感都没有。说要减肥说了2个月了，可是还是一如既往的吃着肉夹馍！怀疑和否定会接踵而至！忽然想到前段时间觉得这个世界上没有真正的感同身受，但是总会有人会跟你有很相似的期待！愿所有努力的人，能被世界温柔以待！愿此刻的你不在迷茫，突破瓶颈！也愿此时的你，能勿忘初心，将来的你能配的上你的期待！后续分享C学习笔记，加油！Come On！</p>
<p><img src="/2021/01/22/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2021-01-22/1.jpng" alt="listener"></p>
<p>你缺少的从来都不是能量，而是点燃你能量的那一束光！</p>
]]></content>
      <categories>
        <category>Listener的夜晚</category>
      </categories>
      <tags>
        <tag>Listener的夜晚</tag>
        <tag>生活随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>【挑战 Spring】—– Spring之循环依赖一</title>
    <url>/2020/12/15/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%E4%B9%8B%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E4%B8%80/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>当你觉得自己很疲惫的时候，别人也很疲惫，你没有理由不逼自己一把！这次说一下Spring中的循环依赖，纯手打+代码调试！及时总结。不然又忘记了！</p>
<a id="more"></a>

<h3 id="1-什么是循环依赖？"><a href="#1-什么是循环依赖？" class="headerlink" title="** 1.什么是循环依赖？**"></a>** 1.什么是循环依赖？**</h3><p>循环依赖其实就是循环引用，也就是两个或则两个以上的bean互相持有对方，最终形成闭环。比如A依赖于B，B依赖于C，C又依赖于A。如下图：</p>
<p><img src="/2020/12/15/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%E4%B9%8B%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E4%B8%80/1.png" alt="1.png"></p>
<p><strong>注意，这里不是函数的循环调用，是对象的相互依赖关系。循环调用其实就是一个死循环，除非有终结条件。</strong></p>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构:"></a><strong>项目结构:</strong></h4><p><img src="/2020/12/15/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%E4%B9%8B%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E4%B8%80/2.png" alt="2.png"></p>
<h4 id="Spring中循环依赖的场景"><a href="#Spring中循环依赖的场景" class="headerlink" title="Spring中循环依赖的场景"></a>Spring中循环依赖的场景</h4><p>（1）构造器的循环依赖。（<strong>Spring并未解决这种循环依赖的场景问题</strong>）<br>（2）field属性的循环依赖。</p>
<h3 id="Spring中Bean实例化的流程"><a href="#Spring中Bean实例化的流程" class="headerlink" title="Spring中Bean实例化的流程"></a>Spring中Bean实例化的流程</h3><p>以AService 依赖 BService， BService 依赖AService 举例说明</p>
<h4 id="1-将AService的class对象解析成BeanDefinition"><a href="#1-将AService的class对象解析成BeanDefinition" class="headerlink" title="1. 将AService的class对象解析成BeanDefinition"></a>1. 将AService的class对象解析成BeanDefinition</h4><h5 id="1-1将该对象标记为create状态，放入一个Map中"><a href="#1-1将该对象标记为create状态，放入一个Map中" class="headerlink" title="1.1将该对象标记为create状态，放入一个Map中"></a>1.1将该对象标记为create状态，放入一个Map中</h5><h4 id="2-利用反射生成-AService对象；"><a href="#2-利用反射生成-AService对象；" class="headerlink" title="2.  利用反射生成 AService对象；"></a>2.  利用反射生成 AService对象；</h4><h5 id="2-1-此时的对象是一个原始对象"><a href="#2-1-此时的对象是一个原始对象" class="headerlink" title="2.1 此时的对象是一个原始对象"></a>2.1 此时的对象是一个原始对象</h5><h5 id="2-2将原始对象放入三级缓存的Map中-稍后会在代码中解释"><a href="#2-2将原始对象放入三级缓存的Map中-稍后会在代码中解释" class="headerlink" title="2.2将原始对象放入三级缓存的Map中(稍后会在代码中解释)"></a>2.2将原始对象放入<strong>三级缓存的Map</strong>中(稍后会在代码中解释)</h5><h5 id="2-3-放入三级缓存Map中的key-AService-value-一个lambda表达式"><a href="#2-3-放入三级缓存Map中的key-AService-value-一个lambda表达式" class="headerlink" title="2.3 放入三级缓存Map中的key:AService, value:一个lambda表达式"></a>2.3 放入三级缓存Map中的key:AService, value:一个lambda表达式</h5><h4 id="3-填充AService对象的属性-也叫依赖注入"><a href="#3-填充AService对象的属性-也叫依赖注入" class="headerlink" title="3.填充AService对象的属性(也叫依赖注入)"></a>3.填充AService对象的属性(也叫<strong>依赖注入</strong>)</h4><h5 id="3-1属性中需要bService，会去单例池里面去找"><a href="#3-1属性中需要bService，会去单例池里面去找" class="headerlink" title="3.1属性中需要bService，会去单例池里面去找"></a>3.1属性中需要bService，会去单例池里面去找</h5><h5 id="3-2-单例池里面找不到bService，会去二级缓存Map中去找"><a href="#3-2-单例池里面找不到bService，会去二级缓存Map中去找" class="headerlink" title="3.2 单例池里面找不到bService，会去二级缓存Map中去找"></a>3.2 单例池里面找不到bService，会去二级缓存Map中去找</h5><h5 id="3-3-二级缓存中仍然找不到bService，则此时会去创建BService对象。-又开始执行第一步将class解析成BeanDefinition以及第2步……"><a href="#3-3-二级缓存中仍然找不到bService，则此时会去创建BService对象。-又开始执行第一步将class解析成BeanDefinition以及第2步……" class="headerlink" title="3.3 二级缓存中仍然找不到bService，则此时会去创建BService对象。(又开始执行第一步将class解析成BeanDefinition以及第2步……)"></a>3.3 二级缓存中仍然找不到bService，则此时会去创建BService对象。(又开始执行第一步将class解析成BeanDefinition以及第2步……)</h5><h5 id="3-4填充BService对象的属性——-gt-去单例池中寻找AService没找到——-gt-去二级缓存Map中去找——-gt-三级缓存中找—–-gt-找到了lambda表达式-原始对象-—–-gt-执行表达式生成AService—–-gt-执行aop（此时是提前aop）—–-gt-生成aService代理对象—–-gt-放入二级缓存map中-lt-aService-代理对象-gt-—–-gt-三级缓存map-remove-“aService”-删除2-3步中放入Aservice相关信息"><a href="#3-4填充BService对象的属性——-gt-去单例池中寻找AService没找到——-gt-去二级缓存Map中去找——-gt-三级缓存中找—–-gt-找到了lambda表达式-原始对象-—–-gt-执行表达式生成AService—–-gt-执行aop（此时是提前aop）—–-gt-生成aService代理对象—–-gt-放入二级缓存map中-lt-aService-代理对象-gt-—–-gt-三级缓存map-remove-“aService”-删除2-3步中放入Aservice相关信息" class="headerlink" title="3.4填充BService对象的属性——&gt;去单例池中寻找AService没找到——&gt;去二级缓存Map中去找——&gt;三级缓存中找—–&gt;找到了lambda表达式(原始对象)—–&gt;执行表达式生成AService—–&gt;执行aop（此时是提前aop）—–&gt;生成aService代理对象—–&gt;放入二级缓存map中&lt;aService,代理对象&gt;—–&gt;三级缓存map.remove(“aService”)删除2.3步中放入Aservice相关信息"></a>3.4填充BService对象的属性——&gt;去单例池中寻找AService没找到——&gt;去二级缓存Map中去找——&gt;三级缓存中找—–&gt;找到了lambda表达式(原始对象)—–&gt;执行表达式生成AService—–&gt;执行aop（此时是提前aop）—–&gt;生成aService代理对象—–&gt;放入二级缓存map中&lt;aService,代理对象&gt;—–&gt;三级缓存map.remove(“aService”)删除2.3步中放入Aservice相关信息</h5><h4 id="4-执行Aware相关代码-如果BService实现了Aware接口，会回调Aware相关方法"><a href="#4-执行Aware相关代码-如果BService实现了Aware接口，会回调Aware相关方法" class="headerlink" title="4. 执行Aware相关代码(如果BService实现了Aware接口，会回调Aware相关方法)"></a>4. 执行Aware相关代码(如果BService实现了Aware接口，会回调Aware相关方法)</h4><h4 id="5-初始化BService对象"><a href="#5-初始化BService对象" class="headerlink" title="5.初始化BService对象"></a>5.初始化BService对象</h4><h4 id="6-执行BService的AOP"><a href="#6-执行BService的AOP" class="headerlink" title="6.执行BService的AOP"></a>6.执行BService的AOP</h4><h4 id="7-将BService放入单例池"><a href="#7-将BService放入单例池" class="headerlink" title="7.将BService放入单例池"></a>7.将BService放入单例池</h4><h4 id="8-如果AService实现了Aware接口，则回调AService的方法-—–-gt-初始化AService对象—–-gt-执行AService的AOP—–-gt-将AService放入单例池"><a href="#8-如果AService实现了Aware接口，则回调AService的方法-—–-gt-初始化AService对象—–-gt-执行AService的AOP—–-gt-将AService放入单例池" class="headerlink" title="8.如果AService实现了Aware接口，则回调AService的方法.—–&gt;初始化AService对象—–&gt;执行AService的AOP—–&gt;将AService放入单例池"></a>8.如果AService实现了Aware接口，则回调AService的方法.—–&gt;初始化AService对象—–&gt;执行AService的AOP—–&gt;将AService放入单例池</h4><h3 id="三个缓存的作用"><a href="#三个缓存的作用" class="headerlink" title="三个缓存的作用"></a>三个缓存的作用</h3><h4 id="一级缓存：就是Spring的单例池Map"><a href="#一级缓存：就是Spring的单例池Map" class="headerlink" title="一级缓存：就是Spring的单例池Map"></a>一级缓存：就是Spring的单例池Map</h4><h4 id="二级缓存：-如果Bean对象提前AOP-，二级缓存存放的是对象的代理对象；如果对象没有提前AOP，二级缓存存放的是原始对象"><a href="#二级缓存：-如果Bean对象提前AOP-，二级缓存存放的是对象的代理对象；如果对象没有提前AOP，二级缓存存放的是原始对象" class="headerlink" title="二级缓存： 如果Bean对象提前AOP ，二级缓存存放的是对象的代理对象；如果对象没有提前AOP，二级缓存存放的是原始对象"></a>二级缓存： 如果Bean对象提前AOP ，二级缓存存放的是对象的代理对象；如果对象没有提前AOP，二级缓存存放的是原始对象</h4><h4 id="三级缓存：存放Bean的原始对象的Lambda表达式（如果Bean提前AOP需要依赖原始对象，该原始对象是在三级缓存中获取的）"><a href="#三级缓存：存放Bean的原始对象的Lambda表达式（如果Bean提前AOP需要依赖原始对象，该原始对象是在三级缓存中获取的）" class="headerlink" title="三级缓存：存放Bean的原始对象的Lambda表达式（如果Bean提前AOP需要依赖原始对象，该原始对象是在三级缓存中获取的）"></a>三级缓存：存放Bean的原始对象的Lambda表达式（如果Bean提前AOP需要依赖原始对象，该原始对象是在三级缓存中获取的）</h4><h4 id="注意：二级缓存存放了Bean的对象之后，三级缓存中需要把存放的lambda表达式删除掉"><a href="#注意：二级缓存存放了Bean的对象之后，三级缓存中需要把存放的lambda表达式删除掉" class="headerlink" title="注意：二级缓存存放了Bean的对象之后，三级缓存中需要把存放的lambda表达式删除掉"></a>注意：二级缓存存放了Bean的对象之后，三级缓存中需要把存放的lambda表达式删除掉</h4><h3 id="代码解读下一篇在解读，代码确实有点绕！"><a href="#代码解读下一篇在解读，代码确实有点绕！" class="headerlink" title="代码解读下一篇在解读，代码确实有点绕！"></a>代码解读下一篇在解读，代码确实有点绕！</h3><center><h3>欢迎扫码关注</h3></center>

<blockquote>
<p> 如果喜欢请关注我公众号【程序倾听者】，说出你的故事！我在这里倾听！</p>
<p> <img src="/images/public-wechat.jpg" alt></p>
</blockquote>
]]></content>
      <categories>
        <category>Spring点滴</category>
      </categories>
      <tags>
        <tag>挑战Spring</tag>
        <tag>java后端</tag>
      </tags>
  </entry>
  <entry>
    <title>【网络编程】—– 四层和七层网络模型，到底是个啥？</title>
    <url>/2020/07/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E5%9B%9B%E5%B1%82%E5%92%8C%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="四层和七层网络模型，到底是个啥？"><a href="#四层和七层网络模型，到底是个啥？" class="headerlink" title="四层和七层网络模型，到底是个啥？"></a>四层和七层网络模型，到底是个啥？</h3><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前老是听说什么网络”四层模型”、“七层模型”，到底什么鬼，刚好又赶上最近的工作是跟通信相关，不懂点网络分层模型，感觉有点对不起内心中小小的倔强！正好看了下极客时间上透视HTTP协议上对网络分层的讲解，先记下来，深刻理解加长久记忆！</p>
<a id="more"></a>

<h4 id="TCP-IP-网络分层模型"><a href="#TCP-IP-网络分层模型" class="headerlink" title="TCP/IP 网络分层模型"></a>TCP/IP 网络分层模型</h4><p>还是先从 TCP/IP 协议开始讲起，一是因为它非常经典，二是因为它是目前事实上的网络通信标准，研究它的实用价值最大。<br>先看下TCP/IP 的协议层次图。</p>
<p><img src="/2020/07/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E5%9B%9B%E5%B1%82%E5%92%8C%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/TCP-IP%E5%88%86%E5%B1%82.png" alt="TCP-IP分层.png"></p>
<p>TCP/IP 协议总共有四层，就像搭积木一样，每一层需要下层的支撑，同时又支撑着上层，<br>任何一层被抽掉都可能会导致整个协议栈坍塌。</p>
<p>第一层叫“<strong>链接层</strong>”（link layer），负责在以太网、WiFi 这样的底层网络上发送原始数据包，工作在网卡这个层次，使用 MAC 地址来标记网络上的设备，所以有时候也叫 MAC层。</p>
<p>第二层叫“<strong>网际层</strong>”或者“<strong>网络互连层</strong>”（internet layer），IP 协议就处在这一层。因为IP 协议定义了“IP 地址”的概念，所以就可以在“<strong>链接层</strong>”的基础上，用 IP 地址取代MAC 地址，把许许多多的局域网、广域网连接成一个虚拟的巨大网络，在这个网络里找设备时只要把 IP 地址再“翻译”成 MAC 地址就可以了。</p>
<p>第三层叫“<strong>传输层</strong>”（transport layer），这个层次协议的职责是保证数据在 IP 地址标记的两点之间“<strong>可靠</strong>”地传输，是 TCP 协议工作的层次，另外还有它的一个“小伙伴”UDP。<strong>TCP 是一个有状态的协议</strong>，需要先与对方建立连接然后才能发送数据，而且保证数据不丢失不重复。而 <strong>UDP 则比较简单，它无状态</strong>，不用事先建立连接就可以任意发送数据，但不<br>保证数据一定会发到对方。两个协议的另一个重要区别在于数据的形式。TCP 的数据是连续的“字节流”，有先后顺序，而 UDP 则是分散的小数据包，是顺序发，乱序收。关于 TCP 和 UDP 可以展开讨论的话题还有很多，比如最经典的“三次握手”和“四次挥手”。</p>
<p>第四层叫“<strong>应用层</strong>”（application layer），由于下面的三层把基础打得非常好，所以在这一层就“百花齐放”了，有各种面向具体应用的协议。例如 Telnet、SSH、FTP、SMTP 等等。</p>
<p>MAC 层的传输单位是帧（frame），IP 层的传输单位是包（packet），TCP 层的传输单位是段（segment），HTTP 的传输单位则是消息或报文（message）。但这些名词并没有什么本质的区分，可以统称为数据包。</p>
<h4 id="OSI-网络分层模型"><a href="#OSI-网络分层模型" class="headerlink" title="OSI 网络分层模型"></a>OSI 网络分层模型</h4><p>OSI，全称是“开放式系统互联通信参考模型”（Open System Interconnection Reference Model），历史背景就不说了。</p>
<p>OSI 模型分成了七层，部分层次与 TCP/IP 很像，从下到上分别是：</p>
<p><img src="/2020/07/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E5%9B%9B%E5%B1%82%E5%92%8C%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/OSI-%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.png" alt="OSI-七层模型.png"></p>
<ol>
<li>第一层：物理层，网络的物理形式，例如电缆、光纤、网卡、集线器等等；</li>
<li>第二层：数据链路层，它基本相当于 TCP/IP 的链接层；</li>
<li>第三层：网络层，相当于 TCP/IP 里的网际层；</li>
<li>第四层：传输层，相当于 TCP/IP 里的传输层；</li>
<li>第五层：会话层，维护网络中的连接状态，即保持会话和同步；</li>
<li>第六层：表示层，把数据转换为合适、可理解的语法和语义；</li>
<li>第七层：应用层，面向具体的应用传输数据。</li>
</ol>
<h4 id="两个分层模型的映射关系"><a href="#两个分层模型的映射关系" class="headerlink" title="两个分层模型的映射关系"></a>两个分层模型的映射关系</h4><p><img src="/2020/07/12/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E5%9B%9B%E5%B1%82%E5%92%8C%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/OSI-TCP%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB.png" alt="OSI-TCP映射关系.png"></p>
<ol>
<li>第一层：物理层，TCP/IP 里无对应；</li>
<li>第二层：数据链路层，对应 TCP/IP 的链接层；</li>
<li>第三层：网络层，对应 TCP/IP 的网际层；</li>
<li>第四层：传输层，对应 TCP/IP 的传输层；</li>
<li>第五、六、七层：统一对应到 TCP/IP 的应用层。</li>
</ol>
<p>所谓的“<strong>四层负载均衡</strong>”就是指工作在传输层上，基于 TCP/IP 协议的特性，例如 IP 地址、端口号等实现对后端服务器的负载均衡。</p>
<p>所谓的“<strong>七层负载均衡</strong>”就是指工作在应用层上，看到的是 HTTP 协议，解析 HTTP 报文里的 URI、主机名、资源类型等数据，再用适当的策略转发给后端服务器。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li><strong>TCP/IP 分为四层，核心是二层的 IP 和三层的 TCP，HTTP 在第四层；</strong></li>
<li><strong>OSI 分为七层，基本对应 TCP/IP，TCP 在第四层，HTTP 在第七层；</strong></li>
<li><strong>OSI 可以映射到 TCP/IP，但这期间一、五、六层消失了；</strong></li>
<li><strong>日常交流的时候我们通常使用 OSI 模型，用四层、七层等术语；</strong></li>
<li><strong>HTTP 利用 TCP/IP 协议栈逐层打包再拆包，实现了数据传输，但下面的细节并不可见。</strong></li>
<li><strong>有一个辨别四层和七层比较好的（但不是绝对的）小窍门，“两个凡是”：凡是由操作系统</strong><br><strong>负责处理的就是四层或四层以下，否则，凡是需要由应用程序（也就是你自己写代码）负责</strong><br>  <strong>处理的就是七层</strong>。</li>
</ol>
<center><h3>欢迎扫码关注</h3></center>

<blockquote>
<p> 如果喜欢请关注我公众号【程序倾听者】，说出你的故事！我在这里倾听！</p>
<p> <img src="/images/public-wechat.jpg" alt></p>
</blockquote>
]]></content>
      <categories>
        <category>网络编程</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>【挑战 Spring】—– Spring IOC 源码调试一</title>
    <url>/2020/05/20/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%80/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用Spring已经很久了，一直想对源码去窥探窥探，拖了又拖、等了又等。自从在<a href="http://listener.org.cn/2020/05/16/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-05-16/" target="_blank" rel="noopener" title="With a Title">Listener的第一个夜晚</a>之后，我决定不能在等了，在等万一Spring被淘汰了呢(开个有点认真的玩笑)？所以来个挑战Spring系列，对源码细粒度调试以及解读。虽说不敢挑战全网之最细粒度跟踪，但是也是尽可能的细节了。</p>
<a id="more"></a>

<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构:"></a>项目结构:</h3><p>先看下调试代码，即Spring的入口，就是使用的<code>ClassPathXmlApplicationContext</code>类去加载配置文件<img src="/2020/05/20/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%80/%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81.png" alt></p>
<p><img src="/2020/05/20/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%80/spring-iocxml.png" alt="spring-iocxml.png"></p>
<h3 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试:"></a>开始调试:</h3><h4 id="1-加载AbstractApplicationContext类的静态代码块"><a href="#1-加载AbstractApplicationContext类的静态代码块" class="headerlink" title="1.加载AbstractApplicationContext类的静态代码块"></a>1.加载<code>AbstractApplicationContext</code>类的静态代码块</h4><p>断点进到<code>new ClassPathXmlApplicationContext(location)</code>中后，第一步是加载<code>AbstractApplicationContext</code>类的静态代码块。这段代码，我也不不清楚作用是什么，官方注释的意思是先加载<code>ContextClosedEvent</code>类以避免在WebLogic 8.1中关闭应用程序时出现奇怪的类加载器问题。但是不影响主流程。( <strong>这块也隐藏了一个小知识点就是父类的静态代码块执行顺序优先于子类的有参构造方法</strong>)</p>
<p><img src="/2020/05/20/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%80/1.png" alt="image-20200520140100819"></p>
<h4 id="2-执行ClassPathXmlApplicationContext构造方法"><a href="#2-执行ClassPathXmlApplicationContext构造方法" class="headerlink" title="2.执行ClassPathXmlApplicationContext构造方法"></a>2.执行<code>ClassPathXmlApplicationContext</code>构造方法</h4><ol>
<li>第一步会进到<code>ClassPathXmlApplicationContext</code>类的有参构造方法中。其中参数就是xml文件的位置<code>classpath*:META-INF/spring-ioc.xml</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(<span class="keyword">new</span> String[] &#123;configLocation&#125;, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>第二步进入到<code>ClassPathXmlApplicationContext</code>另一个构造方法中，并且层层往上调用父类构造方法<strong><code>super(parent)【从第一步得parent参数为null】</code></strong>，直到调用到<code>AbstractApplicationContext</code> 类为止。其中调用顺：<code>ClassPathXmlApplicationContext</code>–&gt;<code>AbstractXmlApplicationContext</code>–&gt;<code>AbstractRefreshableConfigApplicationContext</code>–&gt;<code>AbstractRefreshableApplicationContext</code>–&gt;<code>AbstractApplicationContext</code> 这也体现了<code>ClassPathXmlApplicationContext</code>的一个继承关系</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      String[] configLocations, <span class="keyword">boolean</span> refresh, @Nullable ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>(parent);</span><br><span class="line">   setConfigLocations(configLocations);</span><br><span class="line">   <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">      <span class="comment">// 调用父类 AbstractApplicationContext#refresh() 的方法</span></span><br><span class="line">      refresh();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-执行AbstractApplicationContext-类的构造方法"><a href="#3-执行AbstractApplicationContext-类的构造方法" class="headerlink" title="3.执行AbstractApplicationContext 类的构造方法"></a>3.执行<code>AbstractApplicationContext</code> 类的构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.resourcePatternResolver = getResourcePatternResolver();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractApplicationContext</span><span class="params">(@Nullable ApplicationContext parent)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>();</span><br><span class="line">   setParent(parent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例化<code>AbstractApplicationContext</code>对象的时候，可以看到构造方法中执行了两个操作，第一个是<code>getResourcePatternResolver()</code>实例化<code>ResourcePatternResolver</code>；第二个是<code>setParent(parent)</code></p>
<h5 id="1-实例化ResourcePatternResolver对象"><a href="#1-实例化ResourcePatternResolver对象" class="headerlink" title="1.实例化ResourcePatternResolver对象"></a>1.实例化<code>ResourcePatternResolver</code>对象</h5><p>在<code>getResourcePatternResolver()</code>方法中可以看到返回的对象是<code>PathMatchingResourcePatternResolver</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ResourcePatternResolver <span class="title">getResourcePatternResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> PathMatchingResourcePatternResolver(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-简单说一下PathMatchingResourcePatternResolver"><a href="#2-简单说一下PathMatchingResourcePatternResolver" class="headerlink" title="2.简单说一下PathMatchingResourcePatternResolver"></a>2.简单说一下<code>PathMatchingResourcePatternResolver</code></h5><p><code>PathMatchingResourcePatternResolver</code>的顶级接口是<code>ResourceLoader</code>，<strong>简单说就是来加载我们的资源文件的</strong>(比如:<code>classpath*:META-INF/spring-ioc.xml</code>)</p>
<h5 id="3-setParent-parent"><a href="#3-setParent-parent" class="headerlink" title="3. setParent(parent)"></a>3. setParent(parent)</h5><p><code>this.parent</code>是<code>ApplicationContext parent</code>类型的属性，此时从<code>ClassPathXmlApplicationContext</code>类层层调用传上来的parent参数为null。里面还有一段判断逻辑意思就是，如果parent参数不为null，还会对容器运行环境上下文对象做一个合并处理。意思就是把环境配置信息进行一个合并。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(@Nullable ApplicationContext parent)</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">this</span>.parent = parent;   </span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;      </span><br><span class="line">        Environment parentEnvironment = parent.getEnvironment();      </span><br><span class="line">        <span class="keyword">if</span> (parentEnvironment <span class="keyword">instanceof</span> ConfigurableEnvironment) &#123;                				getEnvironment().merge((ConfigurableEnvironment) parentEnvironment);      </span><br><span class="line">                                                                  &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到此之后代码又会回到<code>AbstractApplicationContext</code> 类的构造方法中</p>
<h4 id="4-回到ClassPathXmlApplicationContext构造方法"><a href="#4-回到ClassPathXmlApplicationContext构造方法" class="headerlink" title="4.回到ClassPathXmlApplicationContext构造方法"></a>4.回到<code>ClassPathXmlApplicationContext</code>构造方法</h4><p><strong><code>super(parent)</code></strong>方法完成后，此时父类对象实例化完成，但是<code>ClassPathXmlApplicationContext</code>对象还未实例化完成。下面代码中可以看到后面还有 <code>setConfigLocations(configLocations)</code>和<code>refresh()</code>两个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      String[] configLocations, <span class="keyword">boolean</span> refresh, @Nullable ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>(parent);</span><br><span class="line">    <span class="comment">// 调用父类 AbstractRefreshableConfigApplicationContext 的 setConfigLocations()方法</span></span><br><span class="line">   setConfigLocations(configLocations);</span><br><span class="line">   <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">      <span class="comment">// 调用父类 AbstractApplicationContext#refresh() 的方法</span></span><br><span class="line">      refresh();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-执行AbstractRefreshableConfigApplicationContext的setConfigLocations-Nullable-String-locations"><a href="#1-执行AbstractRefreshableConfigApplicationContext的setConfigLocations-Nullable-String-locations" class="headerlink" title="1.执行AbstractRefreshableConfigApplicationContext的setConfigLocations(@Nullable String... locations)"></a>1.执行<code>AbstractRefreshableConfigApplicationContext</code>的<code>setConfigLocations(@Nullable String... locations)</code></h5><p>因为<code>ClassPathXmlApplicationContext</code>中没有<code>setConfigLocations(configLocations)</code>方法，该方法被封装在父类<code>AbstractRefreshableConfigApplicationContext</code>中，代码如下：</p>
<p><img src="/2020/05/20/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%80/setConfigLocations.png" alt="image-20200520151904791"></p>
<p>在代码中可以看到有这样一段逻辑<code>this.configLocations[i] = resolvePath(locations[i]).trim()</code>意思就是把我们配置资源路径维护进一个数组中。下面我们说一下这个<code>resolvePath(String path)</code>方法。</p>
<h5 id="2-执行AbstractRefreshableConfigApplicationContext的resolvePath-String-path"><a href="#2-执行AbstractRefreshableConfigApplicationContext的resolvePath-String-path" class="headerlink" title="2.执行AbstractRefreshableConfigApplicationContext的resolvePath(String path)"></a>2.执行<code>AbstractRefreshableConfigApplicationContext</code>的<code>resolvePath(String path)</code></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">resolvePath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> getEnvironment().resolveRequiredPlaceholders(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>resolvePath(String path)</code>方法中有两个操作，一个是<code>getEnvironment()</code>，一个是<code>resolveRequiredPlaceholders(path)</code>方法</p>
<ul>
<li><p><code>getEnvironment()</code>方法</p>
<p><img src="/2020/05/20/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%80/getEnvironment().png" alt="getEnvironment()"></p>
</li>
</ul>
<p>其中<code>getEnvironment()</code>方法又被封装在<code>AbstractApplicationContext</code>类中（如果这儿继承关系有点可以乱看下前面说<code>ClassPathXmlApplicationContext</code>构造方法调用顺序），在该方法中实例化了一<code>StandardEnvironment</code>对象并且将该对象赋值给<code>ConfigurableEnvironment environment</code>属性，就是容器的运行环境应用上下文对象，这个对象可以读取配置文件（SpringBoot项目中我们一般会经常用这个对象）</p>
<ul>
<li><p><code>resolveRequiredPlaceholders(path)</code>方法</p>
<p>其中<code>getEnvironment()</code>方法我们得到了一个<code>ConfigurableEnvironment</code>类型对象，真正的实现类是<code>StandardEnvironment</code>。所以会执行<code>StandardEnvironment</code>的<code>resolveRequiredPlaceholders(path)</code>方法，而该方法有封装在了父类<code>AbstractEnvironment</code>中，代码如下:</p>
<p><img src="/2020/05/20/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%80/resolveRequiredPlaceholders.png" alt="resolveRequiredPlaceholders.png"></p>
<p>在<code>AbstractEnvironment</code>中我们看到又有这么一段逻辑<code>this.propertyResolver.resolveRequiredPlaceholders(text)</code>,返回值是一个String类型(我日，真是头大的不行！)，意思就是又委托给<code>this.propertyResolver</code>去执行了。那我们看一下这个<code>this.propertyResolver</code>是什么：</p>
<p><img src="/2020/05/20/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%80/AbstractEnvironment-propertyResolver.png" alt="AbstractEnvironment-propertyResolver.png"></p>
<p>可以看到是直接 new 了一个<code>PropertySourcesPropertyResolver</code>对象，该对象是一个资源解析器，该对象的顶级接口是<code>PropertyResolver</code>。我理解的就是用来解析<code>Properties</code>配置文件的，里面定义了很多读取配置文件的API。</p>
<p><strong>那好代码接着往下走可以看<code>this.propertyResolver.resolveRequiredPlaceholders(text)</code>到返回值就是我们配置的资源文件路径</strong></p>
<p><img src="/2020/05/20/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%80/propertyResolver-resolveRequriedPlaceholders.png" alt="propertyResolver-resolveRequriedPlaceholders.png"></p>
</li>
</ul>
<h5 id="3-回到AbstractRefreshableConfigApplicationContext的setConfigLocations-Nullable-String-locations-方法"><a href="#3-回到AbstractRefreshableConfigApplicationContext的setConfigLocations-Nullable-String-locations-方法" class="headerlink" title="3.回到AbstractRefreshableConfigApplicationContext的setConfigLocations(@Nullable String... locations)方法"></a>3.回到<code>AbstractRefreshableConfigApplicationContext</code>的<code>setConfigLocations(@Nullable String... locations)</code>方法</h5><p>因为只配了一个资源文件，所以<code>this.configLocations[i] = resolvePath(locations[i]).trim()</code>这段代码执行完后，<code>this.configLocations</code>的长度为1，<strong>并且里面的值为我们资源文件的路径</strong>。</p>
<p><img src="/2020/05/20/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%20%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%80/setConfigLocations.png" alt="image-20200520151904791"></p>
<h5 id="4-再次回到ClassPathXmlApplicationContext构造方法"><a href="#4-再次回到ClassPathXmlApplicationContext构造方法" class="headerlink" title="4.再次回到ClassPathXmlApplicationContext构造方法"></a>4.再次回到<code>ClassPathXmlApplicationContext</code>构造方法</h5><p>因为<code>AbstractRefreshableConfigApplicationContext</code>的<code>setConfigLocations(@Nullable String... locations)</code>方法是在<code>ClassPathXmlApplicationContext</code>类的构造方法调用的，所以执行完之后再次回到<code>ClassPathXmlApplicationContext</code>的构造方法中。代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      String[] configLocations, <span class="keyword">boolean</span> refresh, @Nullable ApplicationContext parent)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>(parent);</span><br><span class="line">    <span class="comment">// 调用父类 AbstractRefreshableConfigApplicationContext 的 setConfigLocations()方法</span></span><br><span class="line">   setConfigLocations(configLocations);</span><br><span class="line">   <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">      <span class="comment">// 调用父类 AbstractApplicationContext#refresh() 的方法</span></span><br><span class="line">      refresh();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这时候往下执行就是大名鼎鼎的<code>refresh()</code>方法</strong>由于篇幅原因，<code>refresh()</code>方法在下一篇博客中更新。</p>
<center><h3>欢迎扫码关注</h3></center>

<blockquote>
<p> 如果喜欢请关注我公众号【程序倾听者】，说出你的故事！我在这里倾听！</p>
<p> <img src="/images/public-wechat.jpg" alt></p>
</blockquote>
]]></content>
      <categories>
        <category>Spring源码</category>
      </categories>
      <tags>
        <tag>挑战Spring</tag>
        <tag>java后端</tag>
      </tags>
  </entry>
  <entry>
    <title>【挑战 Spring】—– Spring IOC 源码调试二</title>
    <url>/2020/05/21/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>昨晚做了个梦……，好！上篇<a href="http://listener.org.cn/2020/05/16/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-05-16/" target="_blank" rel="noopener" title="With a Title">Spring IOC 源码调试一</a>的进度进行到ClassPathXmlApplicationContext<code>类构造方法中的</code>refresh()<code>方法，那这一篇就开始进入到大名鼎鼎的refresh()</code>方法。</p>
<a id="more"></a>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>这是调试代码</p>
<p><img src="/2020/05/21/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%BA%8C/%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81.png" alt="调试代码"></p>
<p><img src="/2020/05/21/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%BA%8C/spring-iocxml.png" alt></p>
<h3 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h3><h4 id="1-执行ClassPathXmlApplicationContext的refresh-方法"><a href="#1-执行ClassPathXmlApplicationContext的refresh-方法" class="headerlink" title="1.执行ClassPathXmlApplicationContext的refresh()方法"></a>1.执行<code>ClassPathXmlApplicationContext</code>的<code>refresh()</code>方法</h4><p>其中会先判断<code>if (refresh)</code>，这个参数默认是<code>true</code>，点进<code>new ClassPathXmlApplicationContext(location)</code>这个代码中的构造方法就可以看到。然后执行<code>refresh()</code>方法，但是该方法被封装到了<strong>父类</strong> <code>AbstractApplicationContext</code>中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">( String[] configLocations, <span class="keyword">boolean</span> refresh, @Nullable</span></span></span><br><span class="line"><span class="function"><span class="params">									ApplicationContext parent)</span><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>(parent);</span><br><span class="line">	setConfigLocations(configLocations);</span><br><span class="line">	<span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">		<span class="comment">// 调用父类 AbstractApplicationContext#refresh() 的方法</span></span><br><span class="line">		refresh();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-执行AbstractApplicationContext类的refresh-方法"><a href="#2-执行AbstractApplicationContext类的refresh-方法" class="headerlink" title="2.执行AbstractApplicationContext类的refresh()方法"></a>2.执行<code>AbstractApplicationContext</code>类的<code>refresh()</code>方法</h4><p>此时代码进到<code>AbstractApplicationContext</code>类中，下面是<code>refresh()</code>总揽，和一些方法注释。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">			<span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">			prepareRefresh();</span><br><span class="line">			<span class="comment">// 创建并初始化 BeanFactory 容器(DefaultListableBeanFactory对象),后面很多方法都需要这个参数</span></span><br><span class="line">			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">			<span class="comment">// 填充 BeanFactory 功能</span></span><br><span class="line">			<span class="comment">//  比如 context的 ClassLoader 和 后置处理器等等。</span></span><br><span class="line">			prepareBeanFactory(beanFactory);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 提供子类覆盖的额外处理，即子类处理自定义的BeanFactoryPostProcess</span></span><br><span class="line">				postProcessBeanFactory(beanFactory);</span><br><span class="line">				<span class="comment">// 激活各种BeanFactory处理器</span></span><br><span class="line">				invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">				<span class="comment">// 注册拦截Bean创建的Bean处理器，即注册 BeanPostProcessor</span></span><br><span class="line">				registerBeanPostProcessors(beanFactory);</span><br><span class="line">				<span class="comment">// 初始化上下文中的资源文件，如国际化文件的处理等</span></span><br><span class="line">				initMessageSource();</span><br><span class="line">				<span class="comment">// 初始化上下文事件广播器</span></span><br><span class="line">				initApplicationEventMulticaster();</span><br><span class="line">				<span class="comment">//预留给 AbstractApplicationContext 的子类用于初始化其他特殊的 bean，该方法需要在所有单例 bean 初始化之前调用。</span></span><br><span class="line">				onRefresh();</span><br><span class="line">				<span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">				registerListeners();</span><br><span class="line">				<span class="comment">// 初始化剩下的单例Bean(非延迟加载的)</span></span><br><span class="line">				finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">				<span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">				finishRefresh();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">					logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">							<span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">				destroyBeans();</span><br><span class="line">				<span class="comment">// Reset 'active' flag.</span></span><br><span class="line">				cancelRefresh(ex);</span><br><span class="line">				<span class="comment">// Propagate exception to caller.</span></span><br><span class="line">				<span class="keyword">throw</span> ex;</span><br><span class="line">			&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">				<span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">				<span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">				resetCommonCaches();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-执行AbstractApplicationContext类的prepareRefresh-方法"><a href="#2-1-执行AbstractApplicationContext类的prepareRefresh-方法" class="headerlink" title="2-1.执行AbstractApplicationContext类的prepareRefresh()方法"></a>2-1.执行<code>AbstractApplicationContext</code>类的<code>prepareRefresh()</code>方法</h5><p>这个方法意思就是准备好应用上下文环境。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Switch to active.</span></span><br><span class="line">   <span class="comment">// 设置启动日期</span></span><br><span class="line">   <span class="keyword">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line">   <span class="comment">// 设置 context 是否关闭的 状态</span></span><br><span class="line">   <span class="keyword">this</span>.closed.set(<span class="keyword">false</span>);</span><br><span class="line">   <span class="comment">// 设置当前容器激活状态</span></span><br><span class="line">   <span class="keyword">this</span>.active.set(<span class="keyword">true</span>);</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">"Refreshing "</span> + <span class="keyword">this</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         logger.debug(<span class="string">"Refreshing "</span> + getDisplayName());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// Initialize any placeholder property sources in the context environment.</span></span><br><span class="line">   <span class="comment">//初始化context environment（上下文环境）中的占位符属性来源（该方法由子类去实现）</span></span><br><span class="line">   initPropertySources();</span><br><span class="line">   <span class="comment">// Validate that all properties marked as required are resolvable:</span></span><br><span class="line">   <span class="comment">// see ConfigurablePropertyResolver#setRequiredProperties</span></span><br><span class="line">   <span class="comment">// 对 容器上下文环境 中的属性进行必要的验证</span></span><br><span class="line">   getEnvironment().validateRequiredProperties();</span><br><span class="line">   <span class="comment">// 实例化一个 LinkedHashSet 存储 预刷新应用的监听器</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationListeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.earlyApplicationListeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.applicationListeners);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Reset local application listeners to pre-refresh state.</span></span><br><span class="line">      <span class="keyword">this</span>.applicationListeners.clear();</span><br><span class="line">      <span class="keyword">this</span>.applicationListeners.addAll(<span class="keyword">this</span>.earlyApplicationListeners);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 允许收集早期的ApplicationEvents，一旦多主机可用就要发布</span></span><br><span class="line">   <span class="comment">// todo 什么意思? 作用?</span></span><br><span class="line">   <span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-执行AbstractApplicationContext类的obtainFreshBeanFactory方法"><a href="#2-2-执行AbstractApplicationContext类的obtainFreshBeanFactory方法" class="headerlink" title="2-2.执行AbstractApplicationContext类的obtainFreshBeanFactory方法"></a>2-2.执行<code>AbstractApplicationContext</code>类的<code>obtainFreshBeanFactory</code>方法</h5><p>在<code>obtainFreshBeanFactory</code>方法中又调用了<code>refreshBeanFactory()</code>方法，但是在<code>AbstractApplicationContext</code>类中该方法是个空方法，<strong>并且此时调用<code>refreshBeanFactory()</code>方法的类依然是<code>ClassPathApplicationContext</code>对象</strong>，所以下一步进入到的<code>ClassPathApplicationContext</code>的父类<code>AbstractRefreshableApplicationContext</code>的<code>refreshBeanFactory()</code>方法中(多跟几遍代码，<code>ClassPathApplicationContext</code>类的继承关系就会理清楚了)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//初始化容器核心方法</span></span><br><span class="line">   refreshBeanFactory();</span><br><span class="line">   <span class="keyword">return</span> getBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-执行AbstractRefreshableApplicationContext的refreshBeanFactory-方法"><a href="#2-3-执行AbstractRefreshableApplicationContext的refreshBeanFactory-方法" class="headerlink" title="2-3. 执行AbstractRefreshableApplicationContext的refreshBeanFactory()方法"></a>2-3. 执行<code>AbstractRefreshableApplicationContext</code>的<code>refreshBeanFactory()</code>方法</h5><p>该方法中重要操作有:</p>
<ol>
<li><code>DefaultListableBeanFactory beanFactory = createBeanFactory()</code>·：创建 BeanFactory 容器对象</li>
<li><code>loadBeanDefinitions(beanFactory)</code> ：加载 BeanDefinition 们,具体提的类实现不同的方法</li>
<li><code>this.beanFactory = beanFactory</code>  ：将容器对象赋值给<code>AbstractRefreshableApplicationContext</code>的<code>private DefaultListableBeanFactory beanFactory</code>属性</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该方法是被final修饰 不允许被子类修改</span></span><br><span class="line"><span class="comment"> * 该方法是 实例化容器 的重要方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="comment">// 若已有 BeanFactory ，销毁它的 Bean 们，并销毁 BeanFactory</span></span><br><span class="line">   <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">      destroyBeans();</span><br><span class="line">      closeBeanFactory();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//创建 BeanFactory 容器对象</span></span><br><span class="line">      DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">      <span class="comment">// 设置 BeanFactory 的序列id</span></span><br><span class="line">      beanFactory.setSerializationId(getId());</span><br><span class="line">      <span class="comment">// 定制 BeanFactory 设置相关属性</span></span><br><span class="line">      customizeBeanFactory(beanFactory);</span><br><span class="line">      <span class="comment">//  加载 BeanDefinition 们,具体提的类实现不同的方法</span></span><br><span class="line">      loadBeanDefinitions(beanFactory);</span><br><span class="line">      <span class="comment">// 加锁防止</span></span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">         <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-（重点）执行AbstractRefreshableApplicationContext的createBeanFactory-方法创建容器对象"><a href="#2-4-（重点）执行AbstractRefreshableApplicationContext的createBeanFactory-方法创建容器对象" class="headerlink" title="2-4. （重点）执行AbstractRefreshableApplicationContext的createBeanFactory()方法创建容器对象"></a>2-4. （重点）执行<code>AbstractRefreshableApplicationContext</code>的<code>createBeanFactory()</code>方法创建容器对象</h5><h6 id="2-4-1-执行DefaultListableBeanFactory（容器对象）的构造方法"><a href="#2-4-1-执行DefaultListableBeanFactory（容器对象）的构造方法" class="headerlink" title="2-4-1.执行DefaultListableBeanFactory（容器对象）的构造方法"></a>2-4-1.执行<code>DefaultListableBeanFactory</code>（容器对象）的构造方法</h6><p>其中new <code>DefaultListableBeanFactory</code>对象时，还调用了一个<code>getInternalParentBeanFactory()</code>方法。其中<code>getInternalParentBeanFactory()</code>方法封装在了<code>AbstractRefreshableApplicationContext</code>的父类<code>AbstractApplicationContext</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> DefaultListableBeanFactory <span class="title">createBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> DefaultListableBeanFactory(getInternalParentBeanFactory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-4-2-getInternalParentBeanFactory-方法"><a href="#2-4-2-getInternalParentBeanFactory-方法" class="headerlink" title="2-4-2.getInternalParentBeanFactory()`方法"></a>2-4-2.getInternalParentBeanFactory()`方法</h6><p>此时代码逻辑在<code>AbstractApplicationContext</code>类中。该方法是先获取容器应用上下文下文对象，如果有则传递给<code>DefaultListableBeanFactory</code>的构造方法。<strong>此时获取到的<code>getParent()</code>为<code>null</code>，详情请见上篇博客的<code>serParent(parent)</code>部分</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> BeanFactory <span class="title">getInternalParentBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (getParent() <span class="keyword">instanceof</span> ConfigurableApplicationContext ?</span><br><span class="line">			((ConfigurableApplicationContext) getParent()).getBeanFactory() : getParent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-4-3-实例化DefaultListableBeanFactory容器对象"><a href="#2-4-3-实例化DefaultListableBeanFactory容器对象" class="headerlink" title="2-4-3.实例化DefaultListableBeanFactory容器对象"></a>2-4-3.实例化<code>DefaultListableBeanFactory</code>容器对象</h6><p>此时进入<code>DefaultListableBeanFactory</code>构造方法，上一步中<code>getInternalParentBeanFactory()</code>方法获取到的返回值为<code>null</code>所以此时<code>BeanFactory parentBeanFactory</code>值为<code>null</code>。然后就是层层向上调用父类的构造方法。调用顺序:</p>
<p><code>DefaultListableBeanFactory</code>–&gt;<code>AbstractAutowireCapableBeanFactory</code>–&gt;<code>AbstractBeanFactory</code></p>
<p>其中执行<code>AbstractAutowireCapableBeanFactory</code>类构造方法时会有一些逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultListableBeanFactory</span><span class="params">(@Nullable BeanFactory parentBeanFactory)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>(parentBeanFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-4-4-执行AbstractAutowireCapableBeanFactory类的有参构造方法"><a href="#2-4-4-执行AbstractAutowireCapableBeanFactory类的有参构造方法" class="headerlink" title="2-4-4.执行AbstractAutowireCapableBeanFactory类的有参构造方法"></a>2-4-4.执行<code>AbstractAutowireCapableBeanFactory</code>类的<strong>有参构造方法</strong></h6><p>下面代码中看到在<code>AbstractAutowireCapableBeanFactory</code>构造方法中有两个操作</p>
<ol>
<li><code>this()</code>中<strong>调用了父类构造方法</strong>和<strong>执行了三个<code>ignoreDependencyInterface</code>操作</strong></li>
<li><code>setParentBeanFactory(parentBeanFactory)</code>此时parentBeanFactory参数为null。<strong>这个方法有些双亲委派的思想，而且这个方法具体实现是封装在了<code>AbstractBeanFactory</code>类中</strong>。</li>
</ol>
<p><img src="/2020/05/21/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%BA%8C/AbstractAutowireCapableBeanFactory-%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95.png" alt="AbstractAutowireCapableBeanFactory-有参构造方法.png"></p>
<h6 id="2-4-5-简单说一下ignoreDependencyInterface方法"><a href="#2-4-5-简单说一下ignoreDependencyInterface方法" class="headerlink" title="2-4-5. 简单说一下ignoreDependencyInterface方法"></a>2-4-5. 简单说一下<code>ignoreDependencyInterface</code>方法</h6><p>​    <code>ignoreDependencyInterface</code> 的主要功能是忽略给定接口的自动装配功能。</p>
<p>​    啥意思？就是说你的类实现了被<code>ignoreDependencyInterface()</code>的接口，不能被自动注入到其他的Bean中。<strong>比如A类中有个B类的属性，但是B类实现了被<code>ignoreDependencyInterface()</code>的接口，此时你在A类中注入B，Spring时不会给你实例化B类的。</strong></p>
<h6 id="2-4-6-完成DefaultListableBeanFactory（容器对象）实例化"><a href="#2-4-6-完成DefaultListableBeanFactory（容器对象）实例化" class="headerlink" title="2-4-6. 完成DefaultListableBeanFactory（容器对象）实例化"></a>2-4-6. 完成<code>DefaultListableBeanFactory</code>（容器对象）实例化</h6><p>此时从2-4-1到2-4-6就完成了<code>DefaultListableBeanFactory</code>对象的实例化，即完成了<code>AbstractRefreshableApplicationContext</code>的<code>createBeanFactory()</code>方法—&gt;<strong>回到<code>AbstractRefreshableApplicationContext</code>的<code>refreshBeanFactory()</code>方法中，下一步执行loadBeanDefinitions(beanFactory)方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类 ：AbstractRefreshableApplicationContext</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该方法是被final修饰 不允许被子类修改</span></span><br><span class="line"><span class="comment"> * 该方法是 实例化容器 的重要方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="comment">// 若已有 BeanFactory ，销毁它的 Bean 们，并销毁 BeanFactory</span></span><br><span class="line">   <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">      destroyBeans();</span><br><span class="line">      closeBeanFactory();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//创建 BeanFactory 容器对象</span></span><br><span class="line">      DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">      <span class="comment">// 设置 BeanFactory 的序列id</span></span><br><span class="line">      beanFactory.setSerializationId(getId());</span><br><span class="line">      <span class="comment">// 定制 BeanFactory 设置相关属性</span></span><br><span class="line">      customizeBeanFactory(beanFactory);</span><br><span class="line">      <span class="comment">//  加载 BeanDefinition 们,具体提的类实现不同的方法</span></span><br><span class="line">      loadBeanDefinitions(beanFactory);</span><br><span class="line">      <span class="comment">// 加锁防止</span></span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">         <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-5（重点）执行AbstractXmlApplicationContext类的loadBeanDefinitions-DefaultListableBeanFactory-beanFactory"><a href="#2-5（重点）执行AbstractXmlApplicationContext类的loadBeanDefinitions-DefaultListableBeanFactory-beanFactory" class="headerlink" title="2-5（重点）执行AbstractXmlApplicationContext类的loadBeanDefinitions(DefaultListableBeanFactory beanFactory)"></a>2-5（重点）执行<code>AbstractXmlApplicationContext</code>类的<code>loadBeanDefinitions(DefaultListableBeanFactory beanFactory)</code></h5><p>该方法是加载/解析Bean元数据信息的方法，此时Spring的容器已经创建好，会把所有的Bean封装成<code>BeanDefiniton</code>（Bean元数据信息）放入容器中。</p>
<p>该方法也有很多个实现，调试代码用的是<code>ClassPathXmlApplicationContext</code>类所以具体实现是在<code>AbstractXmlApplicationContext</code>类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">   <span class="comment">// 创建一个 XmlBeanDefinitionReader XML解析器对象 , 需要一个 beanFactory</span></span><br><span class="line">   XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line">   <span class="comment">// 在实例化 AbstractRefreshableConfigApplicationContext 时 就已经设置了 Environment 属性</span></span><br><span class="line">   beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</span><br><span class="line">   <span class="comment">// 容器应用上下文对象自身 也是 一个 ResourceLoader 类型</span></span><br><span class="line">   beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</span><br><span class="line">   beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</span><br><span class="line">   <span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class="line">   <span class="comment">// then proceed with actually loading the bean definitions.</span></span><br><span class="line">   initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 装载 BeanDefinitions 最后调用的 XmlBeanDefinitionReader#loadBeanDefinitions()方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法中主要操作</p>
<ol>
<li><code>new XmlBeanDefinitionReader(beanFactory)</code>  创建一个 XmlBeanDefinitionReader XML解析对象</li>
<li><code>beanDefinitionReader.setEnvironment(this.getEnvironment())</code> ,给解析对象设置运行环境对象，此时<code>this.getEnvironment()</code>是有返回值的，详情请看上篇博客的``getEnvironment()<code>方法</code>介绍</li>
<li><code>beanDefinitionReader.setResourceLoader(this)</code>设置资源加载器，此时的this就是<code>ClassPathXmlApplication</code>对象，因为到现在代码依然在<code>ClassPathXmlApplication</code>的构造方法中。因为<code>ClassPathXmlApplication</code>间接实现了<code>ResourceLoader</code>接口（Spring统一资源加载器，用来获取资源对象<code>Resource</code>。<a href="http://cmsblogs.com/?p=2656" target="_blank" rel="noopener">这篇博客有详细介绍<code>ResourceLoader</code></a></li>
<li><code>loadBeanDefinitions(beanDefinitionReader)</code> 装载所有<code>BeanDefinitions</code>（Bean的元数据信息对象）</li>
</ol>
<h6 id="2-5-1：-执行AbstractXmlApplicationContext类的loadBeanDefinitions-XmlBeanDefinitionReader-reader-方法"><a href="#2-5-1：-执行AbstractXmlApplicationContext类的loadBeanDefinitions-XmlBeanDefinitionReader-reader-方法" class="headerlink" title="2-5-1： 执行AbstractXmlApplicationContext类的loadBeanDefinitions(XmlBeanDefinitionReader reader)方法"></a>2-5-1： 执行<code>AbstractXmlApplicationContext</code>类的<code>loadBeanDefinitions(XmlBeanDefinitionReader reader)</code>方法</h6><p>该方法中有两个操作</p>
<ol>
<li>获取<code>Resource</code>资源文件，通过<code>getConfigResources()</code>或<code>getConfigLocations()</code>方法。其中<code>getConfigLocations()</code>有返回值的(<strong>看[Spring IOC 源码调试一]的<code>setConfigLocations(@Nullable String... locations)</code>部分</strong>)。</li>
<li><code>reader.loadBeanDefinitions(configLocations)</code>，<strong>将加载/解析 xml中bean对象的任务委托给了<code>XmlBeanDefinitionReader</code>对象</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException</span>&#123;</span><br><span class="line">   Resource[] configResources = getConfigResources();</span><br><span class="line">   <span class="keyword">if</span> (configResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">      reader.loadBeanDefinitions(configResources);</span><br><span class="line">   &#125;</span><br><span class="line">   String[] configLocations = getConfigLocations();</span><br><span class="line">   <span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</span><br><span class="line">      reader.loadBeanDefinitions(configLocations);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-5-2：执行AbstractBeanDefinitionReader的loadBeanDefinitions-String-locations-方法"><a href="#2-5-2：执行AbstractBeanDefinitionReader的loadBeanDefinitions-String-locations-方法" class="headerlink" title="2-5-2：执行AbstractBeanDefinitionReader的loadBeanDefinitions(String... locations)方法"></a>2-5-2：执行<code>AbstractBeanDefinitionReader</code>的<code>loadBeanDefinitions(String... locations)</code>方法</h6><p>虽然把加载/解析 xml中bean对象的任务委托给了<code>XmlBeanDefinitionReader</code>对象，但是该方法的具体实现被封装在了<code>XmlBeanDefinitionReader</code>父类<code>AbstractBeanDefinitionReader</code>中。</p>
<p><img src="/2020/05/21/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%BA%8C/AbstractBeanDefinitionReader-loadBeanDefinitions.png" alt="AbstractBeanDefinitionReader-loadBeanDefinitions.png"></p>
<p><strong>该方法中又是层层调用<code>AbstractBeanDefinitionReader</code>的<code>loadBeanDefinitions</code>重载方法</strong>，最后进入到<code>loadBeanDefinitions(String location, @Nullable Set&lt;Resource&gt; actualResources)</code>方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location, @Nullable Set&lt;Resource&gt; actualResources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="comment">//初始化 XmlBeanDefinitionReader 时 设置了 setResourceLoader(this)</span></span><br><span class="line">   ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line">   <span class="keyword">if</span> (resourceLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">"Cannot load bean definitions from location ["</span> +    												location + <span class="string">"]: no ResourceLoader available"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line">      <span class="comment">// Resource pattern matching available.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line">         <span class="keyword">int</span> count = loadBeanDefinitions(resources);</span><br><span class="line">         <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Collections.addAll(actualResources, resources);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Loaded "</span> + count + <span class="string">" bean definitions from location pattern ["</span> + location + <span class="string">"]"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> count;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">               <span class="string">"Could not resolve bean definition resource pattern ["</span> + location + <span class="string">"]"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Can only load single resources by absolute URL.</span></span><br><span class="line">      Resource resource = resourceLoader.getResource(location);</span><br><span class="line">      <span class="keyword">int</span> count = loadBeanDefinitions(resource);</span><br><span class="line">      <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">         actualResources.add(resource);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">"Loaded "</span> + count + <span class="string">" bean definitions from location ["</span> + location + <span class="string">"]"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>由于篇幅原因<code>loadBeanDefinitions</code>方法到下篇博客继续跟踪……</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p>Spring容器的具体实现对象是<code>DefaultListableBeanFactory</code>，</p>
</li>
<li><p>加载/解析我们配置bean对象的xml文件的类的对象是<code>XmlBeanDefinitionReader</code>对象(这样说可能不太准确，但是解析入口是在该对象中开始的)</p>
</li>
</ol>
<center><h3>欢迎扫码关注</h3></center>

<blockquote>
<p> 如果喜欢请关注我公众号【程序倾听者】，说出你的故事！我在这里倾听！</p>
<p> <img src="/images/public-wechat.jpg" alt></p>
</blockquote>
]]></content>
      <categories>
        <category>Spring源码</category>
      </categories>
      <tags>
        <tag>挑战Spring</tag>
        <tag>java后端</tag>
      </tags>
  </entry>
  <entry>
    <title>【挑战 Spring】—– Spring IOC 源码调试三之loadBeanDefinitions</title>
    <url>/2020/05/28/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当你凝视黑夜的时候，黑夜也在凝视着你！日日当精进，干就完了！上篇<a href="http://listener.org.cn/2020/05/21/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%BA%8C/" target="_blank" rel="noopener" title="With a Title">Spring IOC 源码调试二</a>的进度，进行到了<strong>重点的</strong><code>AbstractBeanDefinitionReader</code>的<code>loadBeanDefinitions</code>方法**，那这一篇接着进行。原创纯手打！实属不易！求赞！求关注！我不会因为您的不支持而低迷，但是有了您的支持我会变的亢奋！</p>
<a id="more"></a>

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>这是调试代码</p>
<p><img src="/2020/05/28/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%89/%E8%B0%83%E8%AF%95%E4%BB%A3%E7%A0%81.png" alt="调试代码"></p>
<p><img src="/2020/05/28/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%B8%89/spring-iocxml.png" alt></p>
<h2 id="开始调试"><a href="#开始调试" class="headerlink" title="开始调试"></a>开始调试</h2><h3 id="（重点）1-执行AbstractBeanDefinitionReader的loadBeanDefinitions-String-location-Nullable-Set-actualResources"><a href="#（重点）1-执行AbstractBeanDefinitionReader的loadBeanDefinitions-String-location-Nullable-Set-actualResources" class="headerlink" title="（重点）1.执行AbstractBeanDefinitionReader的loadBeanDefinitions(String location, @Nullable Set actualResources)"></a>（重点）1.执行<code>AbstractBeanDefinitionReader</code>的<code>loadBeanDefinitions(String location, @Nullable Set actualResources)</code></h3><p>该方法中主要操作有:</p>
<ol>
<li><p><code>ResourceLoader resourceLoader = getResourceLoader()</code>：获取一个<code>ResourceLoader</code>（资源加载器）对象</p>
<p>此时获取到的<code>ResourceLoader</code>具体实现类是<code>ClassPathXmlApplicationContext</code>对象，详情请看<a href="http://listener.org.cn/2020/05/21/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%BA%8C/" target="_blank" rel="noopener" title="With a Title">Spring IOC 源码调试二</a>的<code>2-5</code>部分的第3个操作。</p>
</li>
<li><p><code>int count = loadBeanDefinitions(resources)</code>：继续调用<code>XmlBeanDefinitionReader</code>的<code>loadBeanDefinitions(Resource... resources)</code>方法。<strong>此时的this对象是<code>XmlBeanDefinitionReader</code></strong></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location, @Nullable Set&lt;Resource&gt; actualResources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="comment">//初始化 XmlBeanDefinitionReader 时 设置了 setResourceLoader(this)</span></span><br><span class="line">   ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line">   <span class="keyword">if</span> (resourceLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">"Cannot load bean definitions from location ["</span> +    												location + <span class="string">"]: no ResourceLoader available"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line">      <span class="comment">// Resource pattern matching available.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line">         <span class="comment">// 进一步调用 XmlBeanDefinitionReader的loadBeanDefinitions(Resource... resources)方法</span></span><br><span class="line">          <span class="keyword">int</span> count = loadBeanDefinitions(resources);</span><br><span class="line">         <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Collections.addAll(actualResources, resources);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Loaded "</span> + count + <span class="string">" bean definitions from location pattern ["</span> + location + <span class="string">"]"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> count;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">               <span class="string">"Could not resolve bean definition resource pattern ["</span> + location + <span class="string">"]"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Can only load single resources by absolute URL.</span></span><br><span class="line">      Resource resource = resourceLoader.getResource(location);</span><br><span class="line">      <span class="keyword">int</span> count = loadBeanDefinitions(resource);</span><br><span class="line">      <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">         actualResources.add(resource);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">"Loaded "</span> + count + <span class="string">" bean definitions from location ["</span> + location + <span class="string">"]"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="（重点）2-执行XmlBeanDefinitionReader的loadBeanDefinitions-Resource-resources-方法"><a href="#（重点）2-执行XmlBeanDefinitionReader的loadBeanDefinitions-Resource-resources-方法" class="headerlink" title="（重点）2.执行XmlBeanDefinitionReader的loadBeanDefinitions(Resource... resources)方法"></a>（重点）2.执行<code>XmlBeanDefinitionReader</code>的<code>loadBeanDefinitions(Resource... resources)</code>方法</h3><p>看下面代码，该方法中是对每个资源逐一解析的，但是返回值是总的bean的个数。很无奈又是层层调用<code>XmlBeanDefinitionReader</code>的<code>loadBeanDefinitions</code>重载方法，调用过程中有一个逻辑是把参数<code>Resource</code>对象转换成了<code>EncodeResource</code>对象，并且最后调用到<code>XmlBeanDefinitionReader</code>的<code>loadBeanDefinitions(EncodedResource encodedResource)</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(resources, <span class="string">"Resource array must not be null"</span>);</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">      <span class="comment">// 加载每个资源的 bean 的个数</span></span><br><span class="line">      count += loadBeanDefinitions(resource);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 返回总共 bean 的个数</span></span><br><span class="line">   <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-执行XmlBeanDefinitionReader的loadBeanDefinitions-EncodedResource-encodedResource-方法"><a href="#3-执行XmlBeanDefinitionReader的loadBeanDefinitions-EncodedResource-encodedResource-方法" class="headerlink" title="3.执行XmlBeanDefinitionReader的loadBeanDefinitions(EncodedResource encodedResource)方法"></a>3.执行<code>XmlBeanDefinitionReader</code>的<code>loadBeanDefinitions(EncodedResource encodedResource)</code>方法</h3><p>这个方法主要作用我认为就是获取到资源的输入流。<strong>重点是</strong>将输入流作为参数传入<code>XmlBeanDefinitionReader</code>的<code>doLoadBeanDefinitions(InputSource inputSource, Resource resource)</code>方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(encodedResource, <span class="string">"EncodedResource must not be null"</span>);</span><br><span class="line">   <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">"Loading XML bean definitions from "</span> + encodedResource);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Set&lt;EncodedResource&gt; currentResources = <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">   <span class="keyword">if</span> (currentResources == <span class="keyword">null</span>) &#123;</span><br><span class="line">      currentResources = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">      <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">"Detected cyclic loading of "</span> + encodedResource + <span class="string">" - check your import definitions!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// 得到资源的输入流</span></span><br><span class="line">      InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         InputSource inputSource = <span class="keyword">new</span> InputSource(inputStream);</span><br><span class="line">         <span class="keyword">if</span> (encodedResource.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 真正 解析 XML 文件方法</span></span><br><span class="line">         <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         inputStream.close();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">"IOException parsing XML document from "</span> + encodedResource.getResource(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      currentResources.remove(encodedResource);</span><br><span class="line">      <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">         <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-（重点中的重点）执行XmlBeanDefinitionReader的doLoadBeanDefinitions-InputSource-inputSource-Resource-resource-方法"><a href="#4-（重点中的重点）执行XmlBeanDefinitionReader的doLoadBeanDefinitions-InputSource-inputSource-Resource-resource-方法" class="headerlink" title="4.（重点中的重点）执行XmlBeanDefinitionReader的doLoadBeanDefinitions(InputSource inputSource, Resource resource)方法"></a>4.（重点中的重点）执行<code>XmlBeanDefinitionReader</code>的<code>doLoadBeanDefinitions(InputSource inputSource, Resource resource)</code>方法</h3><p>该方法主要就两个操作:</p>
<ol>
<li><code>Document doc = doLoadDocument(inputSource, resource);</code>：将xml文件解析为<code>Document</code>对象</li>
<li><code>int count = registerBeanDefinitions(doc, resource)</code>：注册<code>Beandefinition</code>到容器(<code>DefaultListableBeanFatory</code>)中</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**将 xml文件  装载为  BeanDefinition</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">      <span class="keyword">int</span> count = registerBeanDefinitions(doc, resource);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Loaded "</span> + count + <span class="string">" bean definitions from "</span> + resource);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (SAXParseException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"Line "</span> + ex.getLineNumber() + <span class="string">" in XML document from "</span> + resource + <span class="string">" is invalid"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (SAXException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"XML document from "</span> + resource + <span class="string">" is invalid"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"Parser configuration exception parsing XML from "</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"IOException parsing XML document from "</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"Unexpected exception parsing XML document from "</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-1Document-doc-doLoadDocument-inputSource-resource"><a href="#4-1Document-doc-doLoadDocument-inputSource-resource" class="headerlink" title="4-1Document doc = doLoadDocument(inputSource, resource)"></a>4-1<code>Document doc = doLoadDocument(inputSource, resource)</code></h4><p>此时的this对象依然为<code>XmlBeanDefinitionReader</code>对象，所以会执行<code>XmlBeanDefinitionReader</code>的<code>doLoadDocument(InputSource inputSource, Resource resource)</code>方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Document <span class="title">doLoadDocument</span><span class="params">(InputSource inputSource, Resource resource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.documentLoader.loadDocument(inputSource, getEntityResolver(), <span class="keyword">this</span>.errorHandler,</span><br><span class="line">         getValidationModeForResource(resource), isNamespaceAware());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码执行的逻辑：</p>
<ol>
<li>首先在<code>XmlBeanDefinitionReader</code>对象中维护了一个<code>private DocumentLoader documentLoader = new DefaultDocumentLoader();</code>属性</li>
<li>执行<code>DefaultDocumentLoader</code>的 <code>loadDocument(InputSource inputSource, EntityResolver entityResolver, ErrorHandler errorHandler, int validationMode, boolean namespaceAware)</code>方法</li>
<li>最后调用到<code>DocumentBuilderImpl</code>的<code>parse(InputSource is)</code>方法，最后执行DOM解析，返回<code>Document</code>对象</li>
<li>由于DOM解析不是重点此处不进行深度跟踪。</li>
</ol>
<p>得到xml文件的<code>Document</code>对象后作为参数传给<code>：XmlBeanDefinitionReader</code>对象的<code>registerBeanDefinitions(doc, resource)</code>方法</p>
<h4 id="4-2执行：XmlBeanDefinitionReader对象的registerBeanDefinitions-Document-doc-Resource-resource-方法"><a href="#4-2执行：XmlBeanDefinitionReader对象的registerBeanDefinitions-Document-doc-Resource-resource-方法" class="headerlink" title="4-2执行：XmlBeanDefinitionReader对象的registerBeanDefinitions(Document doc, Resource resource)方法"></a>4-2执行<code>：XmlBeanDefinitionReader</code>对象的<code>registerBeanDefinitions(Document doc, Resource resource)</code>方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取一个`DefaultBeanDefinitionDocumentReader`对象</span></span><br><span class="line">   BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">    <span class="comment">// 获取 注册Beandefinition之前 Beandefinition的数量</span></span><br><span class="line">   <span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">    <span class="comment">// 注册 BeanDefinition</span></span><br><span class="line">   documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">   <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法中主要逻辑有：</p>
<h5 id="4-2-1BeanDefinitionDocumentReader-documentReader-createBeanDefinitionDocumentReader-得到一个BeanDefinitionDocumentReader对象，真正的实现类是DefaultBeanDefinitionDocumentReader"><a href="#4-2-1BeanDefinitionDocumentReader-documentReader-createBeanDefinitionDocumentReader-得到一个BeanDefinitionDocumentReader对象，真正的实现类是DefaultBeanDefinitionDocumentReader" class="headerlink" title="4-2-1BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader()得到一个BeanDefinitionDocumentReader对象，真正的实现类是DefaultBeanDefinitionDocumentReader"></a>4-2-1<code>BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader()</code>得到一个<code>BeanDefinitionDocumentReader</code>对象，真正的实现类是<code>DefaultBeanDefinitionDocumentReader</code></h5><h5 id="4-2-2int-countBefore-getRegistry-getBeanDefinitionCount-：获取-注册Beandefinition之前-Beandefinition的数量"><a href="#4-2-2int-countBefore-getRegistry-getBeanDefinitionCount-：获取-注册Beandefinition之前-Beandefinition的数量" class="headerlink" title="4-2-2int countBefore = getRegistry().getBeanDefinitionCount();：获取 注册Beandefinition之前 Beandefinition的数量"></a>4-2-2<code>int countBefore = getRegistry().getBeanDefinitionCount();</code>：获取 注册Beandefinition之前 Beandefinition的数量</h5><ul>
<li>此时this对象为<code>：XmlBeanDefinitionReader</code>对象，调用<code>getRegistry()</code>方法时是调用父类<code>AbstractBeanDefinitionReader</code>的<code>getRegistry()</code>方法。</li>
<li><a href="http://listener.org.cn/2020/05/21/%E6%8C%91%E6%88%98Spring%E7%B3%BB%E5%88%97/Spring%20IOC%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E4%BA%8C/" target="_blank" rel="noopener" title="With a Title">Spring IOC 源码调试二</a>的<code>2-5</code>部分的第一个操作在实例化<code>：XmlBeanDefinitionReader</code>对象的时候把<code>DefaultListableBeanFactory</code>最为参数传给了<code>：XmlBeanDefinitionReader</code>的构造参数，而<code>DefaultListableBeanFactory</code>对象又实现了<code>BeanDefinitionRegistry</code>，所以调用<code>AbstractBeanDefinitionReader</code>的<code>getRegistry()</code>方法得到的对象是<code>DefaultListableBeanFactory</code></li>
<li><code>DefaultListableBeanFactory</code>的<code>getBeanDefinitionCount()</code>方法就是获取<code>beanDefinitionMap</code>(Bean元数据信息集合)中的个数</li>
</ul>
<h5 id="4-2-3-documentReader-registerBeanDefinitions-doc-createReaderContext-resource-：注册-BeanDefinition"><a href="#4-2-3-documentReader-registerBeanDefinitions-doc-createReaderContext-resource-：注册-BeanDefinition" class="headerlink" title="4-2-3 documentReader.registerBeanDefinitions(doc, createReaderContext(resource));：注册 BeanDefinition"></a>4-2-3 <code>documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</code>：注册 BeanDefinition</h5><h6 id="4-2-3-1该方法中参数中有一个逻辑-createReaderContext-resource-：我理解为构造：XmlBeanDefinitionReader对象的应用上下文"><a href="#4-2-3-1该方法中参数中有一个逻辑-createReaderContext-resource-：我理解为构造：XmlBeanDefinitionReader对象的应用上下文" class="headerlink" title="4-2-3.1该方法中参数中有一个逻辑:createReaderContext(resource)：我理解为构造：XmlBeanDefinitionReader对象的应用上下文"></a>4-2-3.1该方法中参数中有一个逻辑:<code>createReaderContext(resource)</code>：我理解为构造<code>：XmlBeanDefinitionReader</code>对象的应用上下文</h6><p>大概意思就是把<code>：XmlBeanDefinitionReader</code>包装一下变成<code>XmlReaderContext</code>对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> XmlReaderContext <span class="title">createReaderContext</span><span class="params">(Resource resource)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> XmlReaderContext(resource, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.eventListener,</span><br><span class="line">         <span class="keyword">this</span>.sourceExtractor, <span class="keyword">this</span>, getNamespaceHandlerResolver());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-2-3-2-this对象变化-进入到DefaultBeanDefinitionDocumentReader的registerBeanDefinitions-Document-doc-XmlReaderContext-readerContext-方法"><a href="#4-2-3-2-this对象变化-进入到DefaultBeanDefinitionDocumentReader的registerBeanDefinitions-Document-doc-XmlReaderContext-readerContext-方法" class="headerlink" title="4-2-3.2 (this对象变化)进入到DefaultBeanDefinitionDocumentReader的registerBeanDefinitions(Document doc, XmlReaderContext readerContext)方法"></a>4-2-3.2 (<strong>this对象变化</strong>)进入到<code>DefaultBeanDefinitionDocumentReader</code>的<code>registerBeanDefinitions(Document doc, XmlReaderContext readerContext)</code>方法</h6><p><strong>此时的this对象变为了<code>DefaultBeanDefinitionDocumentReader</code></strong></p>
<p>看到下面代码就知道三个操作</p>
<ul>
<li><code>this.readerContext = readerContext;</code>：将上层函数传进来的<code>XmlReaderContext</code>赋值给自己的属性</li>
<li><code>doc.getDocumentElement()</code>获取<code>Document</code>的节点对象</li>
<li>调用<code>DefaultBeanDefinitionDocumentReader</code>的<code>doRegisterBeanDefinitions(Element root)</code>方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.readerContext = readerContext;</span><br><span class="line">   doRegisterBeanDefinitions(doc.getDocumentElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-2-3-3-执行DefaultBeanDefinitionDocumentReader的doRegisterBeanDefinitions-Element-root-方法"><a href="#4-2-3-3-执行DefaultBeanDefinitionDocumentReader的doRegisterBeanDefinitions-Element-root-方法" class="headerlink" title="4-2-3.3 执行DefaultBeanDefinitionDocumentReader的doRegisterBeanDefinitions(Element root)方法"></a>4-2-3.3 执行<code>DefaultBeanDefinitionDocumentReader</code>的<code>doRegisterBeanDefinitions(Element root)</code>方法</h6><p>该方法注释翻译过来是：在给定的根中注册每个bean定义，我理解就是……好吧我没理解啥。</p>
<p>主要有两个操作</p>
<ul>
<li><p><code>this.delegate = createDelegate(getReaderContext(), root, parent);</code>：获取 <code>BeanDefinitionParserDelegate</code> 对象</p>
<p>简单说一下<code>BeanDefinitionParserDelegate</code> 对象：</p>
<ol>
<li>里面维护了Spring的xml配置文的标签常量。(比如 “bean”、”name”、“id”、”singleton”、”scope”)</li>
<li>里面封装了将标签解析为<code>Beandefinition</code>的方法</li>
</ol>
</li>
<li><p><code>parseBeanDefinitions(root, this.delegate);</code>：一看这方法就知道后面将注册又委托给了<code>this.delegate</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**在给定的根中注册每个bean定义</span></span><br><span class="line"><span class="comment"> * Register each bean definition within the given root &#123;<span class="doctag">@code</span> &lt;beans/&gt;&#125; element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)  <span class="comment">// for Environment.acceptsProfiles(String...)</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">   BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</span><br><span class="line">    <span class="comment">// 获取 BeanDefinitionParserDelegate 对象</span></span><br><span class="line">   <span class="keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">         String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">               profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">         <span class="comment">// We cannot use Profiles.of(...) since profile expressions are not supported</span></span><br><span class="line">         <span class="comment">// in XML config. See SPR-12458 for details.</span></span><br><span class="line">         <span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"Skipped XML bean definition file due to specified profiles ["</span> + profileSpec +</span><br><span class="line">                     <span class="string">"] not matching: "</span> + getReaderContext().getResource());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// 空方法</span></span><br><span class="line">   preProcessXml(root);</span><br><span class="line">   <span class="comment">// 解析xml 标签</span></span><br><span class="line">   parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line">    <span class="comment">// 空方法</span></span><br><span class="line">   postProcessXml(root);</span><br><span class="line">   <span class="keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-2-3-4-进入到DefaultBeanDefinitionDocumentReader的parseBeanDefinitions-Element-root-BeanDefinitionParserDelegate-delegate-方法"><a href="#4-2-3-4-进入到DefaultBeanDefinitionDocumentReader的parseBeanDefinitions-Element-root-BeanDefinitionParserDelegate-delegate-方法" class="headerlink" title="4-2-3.4 进入到DefaultBeanDefinitionDocumentReader的parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate)方法"></a>4-2-3.4 进入到<code>DefaultBeanDefinitionDocumentReader</code>的<code>parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate)</code>方法</h6><p>在该方法中，要了解一下Dom解析相关的 Node、Element等对象</p>
<p>因为要解析我们在xml中配置的<code>Bean</code>，所以会<code>parseDefaultElement(ele, delegate)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      NodeList nl = root.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">         Node node = nl.item(i);</span><br><span class="line">         <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">               <span class="comment">// 只 解析 "import", "alias", "bean", "beans" 标签</span></span><br><span class="line">               parseDefaultElement(ele, delegate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 解析 其他的标签 比如 &lt;component-scan&gt; 标签</span></span><br><span class="line">               delegate.parseCustomElement(ele);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      delegate.parseCustomElement(root);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-2-3-5-进入到DefaultBeanDefinitionDocumentReader的parseDefaultElement-Element-ele-BeanDefinitionParserDelegate-delegate-方法"><a href="#4-2-3-5-进入到DefaultBeanDefinitionDocumentReader的parseDefaultElement-Element-ele-BeanDefinitionParserDelegate-delegate-方法" class="headerlink" title="4-2-3.5 进入到DefaultBeanDefinitionDocumentReader的parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate)方法"></a>4-2-3.5 进入到<code>DefaultBeanDefinitionDocumentReader</code>的<code>parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate)</code>方法</h6><p>因为调试项目中只配置了<code>&lt;bean&gt;&lt;/bean&gt;</code>标签，所以只关注代码中的<code>processBeanDefinition(ele, delegate);</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">      importBeanDefinitionResource(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">      processAliasRegistration(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">       <span class="comment">// 解析 bean 标签</span></span><br><span class="line">      processBeanDefinition(ele, delegate);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// recurse</span></span><br><span class="line">      doRegisterBeanDefinitions(ele);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-2-3-6-（this对象变化）进入到DefaultBeanDefinitionDocumentReader的processBeanDefinition-ele-delegate-方法"><a href="#4-2-3-6-（this对象变化）进入到DefaultBeanDefinitionDocumentReader的processBeanDefinition-ele-delegate-方法" class="headerlink" title="4-2-3.6 （this对象变化）进入到DefaultBeanDefinitionDocumentReader的processBeanDefinition(ele, delegate);方法"></a>4-2-3.6 （this对象变化）进入到<code>DefaultBeanDefinitionDocumentReader的</code>processBeanDefinition(ele, delegate);<code>方法</code></h6><p><strong>看代码了解到，将解析任务委托给了<code>BeanDefinitionParserDelegate</code> 对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将 xml 配置信息封装为 Beandefinition</span></span><br><span class="line">   BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">   <span class="keyword">if</span> (bdHolder != <span class="keyword">null</span>) &#123;</span><br><span class="line">      bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//将 Beandefinition 注册到 容器(DefaultListableBeanFactory) 中</span></span><br><span class="line">         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">"Failed to register bean definition with name '"</span> +</span><br><span class="line">               bdHolder.getBeanName() + <span class="string">"'"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Send registration event.</span></span><br><span class="line">      getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该方法主要的3个操作</p>
<ol>
<li><p><code>BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele)</code>：将 xml 配置信息封装为 Beandefinition</p>
<p>在这段代码中可以得知:</p>
<ul>
<li><strong>xml配置的<code>id</code>属性就是我们Bean的名字</strong></li>
<li><strong>容器中bean的名字是唯一的</strong></li>
<li><strong>在<code>parseBeanDefinitionElement(ele, beanName, containingBean)</code>方法中还会初始化<code>Beandefinition</code>的一些属性</strong></li>
<li><strong>最后返回<code>BeanDefinitionHolder</code>对象将<code>Beandefinition</code>包装起来</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">   String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">   String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">   List&lt;String&gt; aliases = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">      String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">      aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 定义 bean 的名字 为xml中配置的 id 属性</span></span><br><span class="line">   String beanName = id;</span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">      beanName = aliases.remove(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">"No XML 'id' specified - using '"</span> + beanName +</span><br><span class="line">               <span class="string">"' as bean name and "</span> + aliases + <span class="string">" as aliases"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 校验名字是不是唯一的</span></span><br><span class="line">   <span class="keyword">if</span> (containingBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">      checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 将xml配置信息 封装成 BeanDefinition 对象</span></span><br><span class="line">   AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">   <span class="keyword">if</span> (beanDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (containingBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">               beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                     beanDefinition, <span class="keyword">this</span>.readerContext.getRegistry(), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               beanName = <span class="keyword">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">               <span class="comment">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class="line">               <span class="comment">// if the generator returned the class name plus a suffix.</span></span><br><span class="line">               <span class="comment">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class="line">               String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">               <span class="keyword">if</span> (beanClassName != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                     beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                     !<span class="keyword">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                  aliases.add(beanClassName);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">               logger.trace(<span class="string">"Neither XML 'id' nor 'name' specified - "</span> +</span><br><span class="line">                     <span class="string">"using generated bean name ["</span> + beanName + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            error(ex.getMessage(), ele);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册<code>Beandefinition</code>到容器中：<code>BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</code></p>
<ul>
<li><p><strong><code>getReaderContext().getRegistry()</code>：因为在<code>4-2-3.1</code>中封装的<code>XmlReaderContext</code>对象包含<code>：XmlBeanDefinitionReader</code>对象的所有信息，所以这个方法获取到的对象就是容器对象<code>DefaultListableBeanFactory</code></strong>，</p>
</li>
<li><p><strong>该方法将第一个操作获取到的<code>bdHolder</code>（<code>Beandefinition</code>对象的持有者）和 容器对象作为参数传入</strong></p>
</li>
<li><p><strong>进入方法后又调用<code>registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition())</code>(此时registry就是DefaultListableBeanFactory对象)将<code>Beandefinition</code>对象添加到<code>DefaultListableBeanFactory</code>对象的属性<code>Map&lt;String, BeanDefinition&gt; beanDefinitionMap = new ConcurrentHashMap&lt;&gt;(256)</code>中，就算注册完成了</strong></p>
</li>
<li><p><strong><code>BeanDefinitionReaderUtils</code>的 <code>registerBeanDefinition()</code>方法代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Register bean definition under primary name.</span></span><br><span class="line">   String beanName = definitionHolder.getBeanName();</span><br><span class="line">    <span class="comment">// 调用 容器对象(DefaultListableBeanFactory) 注册 Beandefinition</span></span><br><span class="line">   registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line">   <span class="comment">// Register aliases for bean name, if any.</span></span><br><span class="line">   String[] aliases = definitionHolder.getAliases();</span><br><span class="line">   <span class="keyword">if</span> (aliases != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">         registry.registerAlias(beanName, alias);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</code></p>
<p>该方法中还有一些逻辑，但是主流程就是将<code>Beandefinition</code>添加到<code>beanDefinitionMap</code>中</p>
</li>
</ul>
</li>
<li><p><code>getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder))</code></p>
<p>该方法注释为<code>Send registration event</code>，我理解是发布一个注册事件。这块没有深入跟踪。</p>
</li>
</ol>
<h6 id="4-2-3-7回到DefaultBeanDefinitionDocumentReader的parseDefaultElement-Element-ele-BeanDefinitionParserDelegate-delegate-方法-4-2-3-5"><a href="#4-2-3-7回到DefaultBeanDefinitionDocumentReader的parseDefaultElement-Element-ele-BeanDefinitionParserDelegate-delegate-方法-4-2-3-5" class="headerlink" title="4-2-3.7回到DefaultBeanDefinitionDocumentReader的parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate)方法(4-2-3.5)"></a>4-2-3.7回到<code>DefaultBeanDefinitionDocumentReader</code>的<code>parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate)</code>方法(4-2-3.5)</h6><p>此时<code>processBeanDefinition(ele, delegate);</code>方法执行完毕</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">      importBeanDefinitionResource(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">      processAliasRegistration(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">      processBeanDefinition(ele, delegate);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// recurse</span></span><br><span class="line">      doRegisterBeanDefinitions(ele);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-2-3-8回到DefaultBeanDefinitionDocumentReader的parseBeanDefinitions-Element-root-BeanDefinitionParserDelegate-delegate-方法-4-2-3-4"><a href="#4-2-3-8回到DefaultBeanDefinitionDocumentReader的parseBeanDefinitions-Element-root-BeanDefinitionParserDelegate-delegate-方法-4-2-3-4" class="headerlink" title="4-2-3.8回到DefaultBeanDefinitionDocumentReader的parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate)方法(4-2-3.4)"></a>4-2-3.8回到<code>DefaultBeanDefinitionDocumentReader</code>的<code>parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate)</code>方法(4-2-3.4)</h6><p>此时 <code>parseDefaultElement(ele, delegate);</code>方法执行完毕，但是此处是遍历根节点对象，意思就是多个<code>&lt;bean&gt;&lt;/bean&gt;</code>标签的话就会遍历执行解析重复上面的过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      NodeList nl = root.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">         Node node = nl.item(i);</span><br><span class="line">         <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">               <span class="comment">// 只 解析 "import", "alias", "bean", "beans" 标签</span></span><br><span class="line">               parseDefaultElement(ele, delegate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 解析 其他的标签 比如 &lt;component-scan&gt; 标签</span></span><br><span class="line">               delegate.parseCustomElement(ele);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      delegate.parseCustomElement(root);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-2-3-9回到DefaultBeanDefinitionDocumentReader的doRegisterBeanDefinitions-Element-root-方法-4-2-3-3"><a href="#4-2-3-9回到DefaultBeanDefinitionDocumentReader的doRegisterBeanDefinitions-Element-root-方法-4-2-3-3" class="headerlink" title="4-2-3.9回到DefaultBeanDefinitionDocumentReader的doRegisterBeanDefinitions(Element root)方法(4-2-3.3)"></a>4-2-3.9回到<code>DefaultBeanDefinitionDocumentReader</code>的<code>doRegisterBeanDefinitions(Element root)</code>方法(4-2-3.3)</h6><ul>
<li>此时执行完了<code>parseBeanDefinitions(root, this.delegate);</code>方法</li>
<li>执行<code>this.delegate = parent</code>，即将<code>this.delegate</code>置为<code>null</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Any nested &lt;beans&gt; elements will cause recursion in this method. In</span></span><br><span class="line">   <span class="comment">// order to propagate and preserve &lt;beans&gt; default-* attributes correctly,</span></span><br><span class="line">   <span class="comment">// keep track of the current (parent) delegate, which may be null. Create</span></span><br><span class="line">   <span class="comment">// the new (child) delegate with a reference to the parent for fallback purposes,</span></span><br><span class="line">   <span class="comment">// then ultimately reset this.delegate back to its original (parent) reference.</span></span><br><span class="line">   <span class="comment">// this behavior emulates a stack of delegates without actually necessitating one.</span></span><br><span class="line">   BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</span><br><span class="line">   <span class="comment">//得到一个 BeanDefinitionParserDelegate 对象</span></span><br><span class="line">   <span class="keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">         String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">               profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">         <span class="comment">// We cannot use Profiles.of(...) since profile expressions are not supported</span></span><br><span class="line">         <span class="comment">// in XML config. See SPR-12458 for details.</span></span><br><span class="line">         <span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"Skipped XML bean definition file due to specified profiles ["</span> + profileSpec +</span><br><span class="line">                     <span class="string">"] not matching: "</span> + getReaderContext().getResource());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 空方法</span></span><br><span class="line">   preProcessXml(root);</span><br><span class="line">   <span class="comment">// 解析xml 标签</span></span><br><span class="line">   parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line">   <span class="comment">// 空方法</span></span><br><span class="line">   postProcessXml(root);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-2-3-10回到DefaultBeanDefinitionDocumentReader的registerBeanDefinitions-Document-doc-XmlReaderContext-readerContext-方法（4-2-3-2）"><a href="#4-2-3-10回到DefaultBeanDefinitionDocumentReader的registerBeanDefinitions-Document-doc-XmlReaderContext-readerContext-方法（4-2-3-2）" class="headerlink" title="4-2-3.10回到DefaultBeanDefinitionDocumentReader的registerBeanDefinitions(Document doc, XmlReaderContext readerContext)方法（4-2-3.2）"></a>4-2-3.10回到<code>DefaultBeanDefinitionDocumentReader</code>的<code>registerBeanDefinitions(Document doc, XmlReaderContext readerContext)</code>方法（4-2-3.2）</h6><p>此时执行完了<code>doRegisterBeanDefinitions(doc.getDocumentElement());</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.readerContext = readerContext;</span><br><span class="line">   doRegisterBeanDefinitions(doc.getDocumentElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-4回到XmlBeanDefinitionReader对象的registerBeanDefinitions-Document-doc-Resource-resource-方法-4-2"><a href="#4-2-4回到XmlBeanDefinitionReader对象的registerBeanDefinitions-Document-doc-Resource-resource-方法-4-2" class="headerlink" title="4-2-4回到XmlBeanDefinitionReader对象的registerBeanDefinitions(Document doc, Resource resource)方法(4-2)"></a>4-2-4回到<code>XmlBeanDefinitionReader</code>对象的<code>registerBeanDefinitions(Document doc, Resource resource)</code>方法(4-2)</h5><ul>
<li>此时执行完了<code>documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</code>方法</li>
<li>执行<code>getRegistry().getBeanDefinitionCount() - countBefore</code>计算得出该次注册<code>BeanDefinition</code>的个数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">   <span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">   documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">   <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-5-回到XmlBeanDefinitionReader的doLoadBeanDefinitions-InputSource-inputSource-Resource-resource-方法-4"><a href="#4-2-5-回到XmlBeanDefinitionReader的doLoadBeanDefinitions-InputSource-inputSource-Resource-resource-方法-4" class="headerlink" title="4-2-5 回到XmlBeanDefinitionReader的doLoadBeanDefinitions(InputSource inputSource, Resource resource)方法(4)"></a>4-2-5 回到<code>XmlBeanDefinitionReader</code>的<code>doLoadBeanDefinitions(InputSource inputSource, Resource resource)</code>方法(4)</h5><ul>
<li>此时执行完了<code>int count = registerBeanDefinitions(doc, resource);</code>方法</li>
<li>然后将 count 返回</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**将 xml文件  装载为  BeanDefinition</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">      <span class="keyword">int</span> count = registerBeanDefinitions(doc, resource);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Loaded "</span> + count + <span class="string">" bean definitions from "</span> + resource);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (SAXParseException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"Line "</span> + ex.getLineNumber() + <span class="string">" in XML document from "</span> + resource + <span class="string">" is invalid"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (SAXException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"XML document from "</span> + resource + <span class="string">" is invalid"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"Parser configuration exception parsing XML from "</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"IOException parsing XML document from "</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"Unexpected exception parsing XML document from "</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-回到本文章开始AbstractBeanDefinitionReader的loadBeanDefinitions-String-location-Nullable-Set-actualResources-方法（1）"><a href="#5-回到本文章开始AbstractBeanDefinitionReader的loadBeanDefinitions-String-location-Nullable-Set-actualResources-方法（1）" class="headerlink" title="5 回到本文章开始AbstractBeanDefinitionReader的loadBeanDefinitions(String location, @Nullable Set actualResources)方法（1）"></a>5 回到本文章开始<code>AbstractBeanDefinitionReader</code>的<code>loadBeanDefinitions(String location, @Nullable Set actualResources)</code>方法（1）</h3><ul>
<li>此时执行完了<code>count += loadBeanDefinitions(resource);</code>方法</li>
<li>因为我只配置了一个xml，所以只有一个<code>resource</code></li>
<li>此处的count为容器中总共<code>Beandefinition</code>的数量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(resources, <span class="string">"Resource array must not be null"</span>);</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">      <span class="comment">// 加载每个资源的 bean 的个数</span></span><br><span class="line">      count += loadBeanDefinitions(resource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><strong><code>loadBeanDefinitions()</code></strong>方法包含了对xml文件的解析以及对<code>Beandefinition</code>对象的封装和注册</li>
<li><strong><code>loadBeanDefinitions()</code></strong>中最后注册是调用的<code>DefaultListableBeanFactory</code>对象的方法</li>
<li>解析出的<code>Beandefinition</code>对象都被维护在<code>DefaultListableBeanFactory</code>对象的<code>Map&lt;String, BeanDefinition&gt; beanDefinitionMap = new ConcurrentHashMap&lt;&gt;(256);</code>属性中</li>
<li>函数调用太深了，但是有规律可循，基本上就是方法重载和任务委托给其他的类来执行任务，要时刻关注this对象是谁</li>
<li>该文章并没有面面俱到，尤其是最后注册那一块不够详细，但是主流程还是走通了。</li>
</ol>
<center><h3>欢迎扫码关注</h3></center>

<blockquote>
<p> 如果喜欢请关注我公众号【程序倾听者】，说出你的故事！我在这里倾听！</p>
<p> <img src="/images/public-wechat.jpg" alt></p>
</blockquote>
]]></content>
      <categories>
        <category>Spring源码</category>
      </categories>
      <tags>
        <tag>挑战Spring</tag>
        <tag>java后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis这一篇就差不多了（待更新）</title>
    <url>/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Redis使用也挺久了，也没用到过高级用法，就是简单的做个缓存。以前也没系统的学过。前几天看了个Redis视频课程，就做了下笔记，大部分都是基础知识，没有涉及到高阶，但是也算是全面的梳理了一遍。<strong>纯手打! 实属不易! 点个赞吧！</strong></p>
<a id="more"></a>

<h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><h4 id="常用命令-点击参考"><a href="#常用命令-点击参考" class="headerlink" title="常用命令(点击参考)"></a>常用命令(<a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">点击参考</a>)</h4><ol>
<li><p>set命令设置 key value </p>
<ul>
<li><p><code>EX</code> <em>seconds</em> – 设置键key的过期时间，单位时秒</p>
</li>
<li><p><code>PX</code> <em>milliseconds</em> – 设置键key的过期时间，单位时毫秒</p>
</li>
<li><p><code>NX</code> – 只有键key不存在的时候才会设置key的值</p>
</li>
<li><p><code>XX</code> – 只有键key存在的时候才会设置key的值</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1：6379&gt; set key "Hello"</span><br><span class="line">OK</span><br><span class="line">127.0.0.1：6379&gt; set key "hello" ex 1000</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>get key</code>：获取某个key的value</p>
</li>
<li><p><code>APPEND key value</code>：追加一个值到<code>key</code>上，如果<code>key</code>不存在则创建一个<code>key</code></p>
</li>
<li><p><code>MSET key1 value1 key2 value2]</code>：设置多个 key value</p>
</li>
<li><p><code>MGET key1 key2</code>：获取多个值，如果key不存在，返回<code>nil</code></p>
</li>
<li><p><code>INCR key</code>(只操作整数)：执行原子加一操作，如果key不存在，则key从0开始加1.</p>
</li>
<li><p><code>INCRBY key increment</code>(只操作整数)`：执行<strong>原子</strong>增加一个值，如果key不存在，key被设置为0，如果数据类型错误返回错误。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1：6379&gt; set num 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1：6379&gt; INCRBY num 2</span><br><span class="line">(integer) 12</span><br><span class="line">127.0.0.1：6379&gt; INCRBY num "sss"</span><br><span class="line">(error) ERR value is not an integer or out of range</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>DECR key(只操作整数)</code>：整数<code>原子</code>减一，如果key不存在，则key从0开始减一，如果数据类型错误，返回错误。</p>
</li>
<li><p><code>DECRBY key decrement</code>(只操作整数)：<strong>原子性</strong>减指定的数，如果key不存在，则key被置为0，然后相减</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1：6379&gt; set num 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1：6379&gt; DECRBY num 5</span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol>
<li>缓存</li>
</ol>
<h3 id="Hashes（哈希）"><a href="#Hashes（哈希）" class="headerlink" title="Hashes（哈希）"></a>Hashes（哈希）</h3><h4 id="常用命令-点击参考-1"><a href="#常用命令-点击参考-1" class="headerlink" title="常用命令(点击参考)"></a>常用命令(<a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">点击参考</a>)</h4><ol>
<li><p><code>HSET key field value</code>：设置hash里面一个字段的值</p>
</li>
<li><p><code>HGET key field</code>：获取某个字段的值</p>
</li>
<li><p><code>HDEL key field</code>：删除<strong>1个或多个</strong>字段的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1：6379&gt; HSET sqt name 'listener'</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1：6379&gt; HGET sqt name</span><br><span class="line">"listener"</span><br><span class="line">127.0.0.1：6379&gt; HDEL sqt name</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1：6379&gt; HGET sqt name</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HKEYS key</code>：获取 key 所有字段的名字</p>
</li>
<li><p><code>HVALS key</code>：返回key所有字段的value值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1：6379&gt; hset sqt name listener age 20 address '西安'</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1：6379&gt; HKEYS sqt</span><br><span class="line">1) "name"</span><br><span class="line">2) "age"</span><br><span class="line">3) "address"</span><br><span class="line">127.0.0.1：6379&gt; HVALS sqt</span><br><span class="line">1) "listener"</span><br><span class="line">2) "20"</span><br><span class="line">3) "\xe8\xa5\xbf\xe5\xae\x89"</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HGETALL key</code>：返回 key 指定的哈希集中所有的字段和值。返回值中，每个字段名的下一个是它的值，所以返回值的长度是哈希集大小的两倍</p>
<h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><ol>
<li>个人用户首页访问量</li>
</ol>
</li>
</ol>
<h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Redis lists<strong>基于Linked Lists实现</strong>。这意味着即使在一个list中有数百万个元素，在头部或尾部添加一个元素的操作，其时间复杂度也是常数级别的</p>
<h4 id="常用命令-点击参考-2"><a href="#常用命令-点击参考-2" class="headerlink" title="常用命令(点击参考)"></a>常用命令(<a href="http://www.redis.cn/commands/brpoplpush.html" target="_blank" rel="noopener">点击参考</a>)</h4><ol>
<li><p><code>LSET key index value</code>：设置 index 位置的list元素的值为 value，当index超出范围返回一个error</p>
</li>
<li><p><code>LPUSH key value1 value2</code>：从队列左边向右边入队一个或多个元素</p>
</li>
<li><p><code>LPOP key</code>：移除并且返回 key 对应的 list 的第一个元素。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH sqt name age address</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; LPOP sqt</span><br><span class="line">"address"</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>LLEN key</code>：返回存储在 key 里的list的长度。如果 key 不存在，会被看作是空list，并且返回长度为 0。 当存储在 key 里的值不是一个list的话，会返回error。</p>
<h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h4><ol>
<li>粉丝列表、关注列表(利用队列的性质)</li>
<li>实现消息队列</li>
</ol>
</li>
</ol>
<h3 id="Sets（集合）"><a href="#Sets（集合）" class="headerlink" title="Sets（集合）"></a><strong>Sets</strong>（集合）</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p><strong>不重复且无序</strong>的字符串元素的集合</p>
<h4 id="常用命令-点击参考-3"><a href="#常用命令-点击参考-3" class="headerlink" title="常用命令(点击参考)"></a>常用命令(<a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">点击参考</a>)</h4><ol>
<li><p><code>sadd key value1 value2</code>：添加一个和多个元素</p>
</li>
<li><p><code>sinter key1 key2</code>：求交集</p>
</li>
<li><p><code>SCARD key</code>：集合存储的key的基数 (集合元素的数量)</p>
</li>
<li><p><code>SREM key member1 member2</code>：移除key集合指定的元素. 如果指定元素不存在则忽略，如果key集合不存在返回0.</p>
</li>
<li><p><code>SPOP key [count]</code>：从存储在<code>key</code>的集合中<strong>移除并返回</strong>一个或多个随机元素</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd set 1 2 3 4 5 6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; SPOP set</span><br><span class="line">"5"</span><br><span class="line">127.0.0.1:6379&gt; SPOP set</span><br><span class="line">"6"</span><br><span class="line">127.0.0.1:6379&gt; SPOP set</span><br><span class="line">"3"</span><br><span class="line">127.0.0.1:6379&gt; SPOP set 2</span><br><span class="line">1) "4"</span><br><span class="line">2) "1"</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>SRANDMEMBER key [count]</code>：随机返回key集合中的一个元素，<strong>不删除</strong></p>
</li>
</ol>
<h4 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>共同好友—-&gt;<code>sinter key1 key2</code></li>
<li>抽奖系统—–&gt;<code>SRANDMEMBER key [count]</code>或<code>SPOP key [count]</code></li>
</ul>
<h3 id="Sorted-Sets-有序集合"><a href="#Sorted-Sets-有序集合" class="headerlink" title="Sorted Sets(有序集合)"></a><strong>Sorted Sets(有序集合)</strong></h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a><strong>简介</strong></h4><p>类似Sets。但是<strong>元素不重复且有序</strong>。但是每个字符串元素都关联到一个叫<em>score</em>浮动数值（floating number value）。里面的元素总是通过score进行着排序，所以不同的是，它是可以检索的一系列元素。</p>
<h4 id="基本命令-点击参考"><a href="#基本命令-点击参考" class="headerlink" title="基本命令(点击参考)"></a><strong>基本命令(<a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">点击参考</a>)</strong></h4><ol>
<li><p><code>ZADD key score element</code>：添加一个或者多个元素， 如果元素(element)已存在，则更新并重新排序。如果key不存在，则创建新集合。复杂度 O(logN)    </p>
<ul>
<li><strong>XX</strong>: 仅仅更新存在的成员，不添加新成员。</li>
<li><strong>NX</strong>: 不更新存在的成员。只添加新成员。</li>
<li><strong>CH</strong>: 修改返回值为发生变化的成员总数，原始是返回新添加成员的总数 (CH 是 <em>changed</em> 的意思)。更改的元素是<strong>新添加的成员</strong>，已经存在的成员<strong>更新分数</strong>。 所以在命令中指定的成员有相同的分数将不被计算在内。注：在通常情况下，<code>ZADD</code>返回值只计算新添加成员的数量。</li>
<li><strong>INCR</strong>: 当<code>ZADD</code>指定这个选项时，成员的操作就等同<a href="http://www.redis.cn/commands/zincrby.html" target="_blank" rel="noopener">ZINCRBY</a>命令，对成员的分数进行递增操作。</li>
</ul>
</li>
<li><p><code>ZCARD key</code>：返回 key 集合元素的数量</p>
</li>
<li><p><code>ZREM key member [member ...]</code>：删除一个或多个元素，当key存在，但是其不是有序集合类型，就返回一个错误。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd user 100 listener 120 sqt</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; zrem user listener</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zcard user</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</code>：有序集合中<strong>指定分数区间内</strong>的成员，分数由高到低排序</p>
<ul>
<li><p>完整语法示例：<code>ZREVRANGEBYSCORE key max min WITHSCORES LIMIT offset count</code></p>
</li>
<li><table>
<thead>
<tr>
<th>指令</th>
<th>是否必须</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ZREVRANGEBYSCORE</td>
<td>是</td>
<td>指令</td>
</tr>
<tr>
<td>key</td>
<td>是</td>
<td>有序集合键名称</td>
</tr>
<tr>
<td>max</td>
<td>是</td>
<td>最大分数值,可使用”+inf”代替</td>
</tr>
<tr>
<td>min</td>
<td>是</td>
<td>最小分数值,可使用”-inf”代替</td>
</tr>
<tr>
<td>WITHSCORES</td>
<td>否</td>
<td>将成员分数一并返回</td>
</tr>
<tr>
<td>LIMIT</td>
<td>否</td>
<td>返回结果是否分页,指令中包含LIMIT后offset、count必须输入</td>
</tr>
<tr>
<td>offset</td>
<td>否</td>
<td>返回结果起始位置</td>
</tr>
<tr>
<td>count</td>
<td>否</td>
<td>返回结果数量</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd exam_score 100 sqt 110 wby 70 cl 10 zhangsan 33 lisi 66 wangwu 77 chenliu 83 listener</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGEBYSCORE exam_score 100 5 WITHSCORES</span><br><span class="line"> 1) "sqt"</span><br><span class="line"> 2) "100"</span><br><span class="line"> 3) "listener"</span><br><span class="line"> 4) "83"</span><br><span class="line"> 5) "chenliu"</span><br><span class="line"> 6) "77"</span><br><span class="line"> 7) "cl"</span><br><span class="line"> 8) "70"</span><br><span class="line"> 9) "wangwu"</span><br><span class="line">10) "66"</span><br><span class="line">11) "lisi"</span><br><span class="line">12) "33"</span><br><span class="line">13) "zhangsan"</span><br><span class="line">14) "10"</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>ZREVRANGEBYLEX key max min [LIMIT offset count]</code>：返回指定成员区间内的成员，按成员字典倒序排序, 分数必须相同</p>
<ul>
<li><p>完整语法：<code>ZREVRANGEBYLEX key max min [LIMIT offset count]</code></p>
</li>
<li><table>
<thead>
<tr>
<th>指令</th>
<th>是否必须</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ZREVRANGEBYLEX</td>
<td>是</td>
<td>指令</td>
</tr>
<tr>
<td>key</td>
<td>是</td>
<td>有序集合键名称</td>
</tr>
<tr>
<td>max</td>
<td>是</td>
<td>字典中排序位置较大的成员,必须以”[“开头,或者以”(“开头,可使用”+”代替</td>
</tr>
<tr>
<td>min</td>
<td>是</td>
<td>字典中排序位置较小的成员,必须以”[“开头,或者以”(“开头,可使用”-“代替</td>
</tr>
<tr>
<td>LIMIT</td>
<td>否</td>
<td>返回结果是否分页,指令中包含LIMIT后offset、count必须输入</td>
</tr>
<tr>
<td>offset</td>
<td>否</td>
<td>返回结果起始位置</td>
</tr>
<tr>
<td>count</td>
<td>否</td>
<td>返回结果数量</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<h4 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h4><ol>
<li>排行榜(根据点赞数、评论数)</li>
<li>热点数据</li>
</ol>
<h3 id="集合-VS-有序集合"><a href="#集合-VS-有序集合" class="headerlink" title="集合 VS 有序集合"></a><strong>集合 VS 有序集合</strong></h3><table>
<thead>
<tr>
<th align="center"><strong>集合</strong></th>
<th align="center"><strong>有序集合</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">无重复元素</td>
<td align="center">无重复元素</td>
</tr>
<tr>
<td align="center">无序</td>
<td align="center">有序</td>
</tr>
<tr>
<td align="center">element</td>
<td align="center">element + score</td>
</tr>
</tbody></table>
<h3 id="列表-VS-有序集合"><a href="#列表-VS-有序集合" class="headerlink" title="列表 VS 有序集合"></a><strong>列表 VS 有序集合</strong></h3><table>
<thead>
<tr>
<th align="center"><strong>列表</strong></th>
<th align="center"><strong>有序集合</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">元素可以重复</td>
<td align="center">元素不可以重复</td>
</tr>
<tr>
<td align="center">无序</td>
<td align="center">有序</td>
</tr>
<tr>
<td align="center">element</td>
<td align="center">element + score</td>
</tr>
</tbody></table>
<h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a><strong>慢查询</strong></h3><p>客户端超时不一定是慢查询，但慢查询是客户端超时的一个因素</p>
<h4 id="生命周期："><a href="#生命周期：" class="headerlink" title="生命周期："></a><strong>生命周期：</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发送命令-&gt;命令排队-&gt;命令执行-&gt;返回结果</span><br></pre></td></tr></table></figure>

<p><strong>慢查询发生在 命令执行  阶段。</strong></p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h4><ol>
<li>配置 <strong><code>slowlog-log-slower-than</code></strong> 指定执行时间超过多少微秒的命令会被记录到日志上<strong>(建议设置为1000)</strong></li>
<li>配置<strong><code>slowlog-max-len</code> **指定最多保存多少条慢查询记录</strong>.(默认10ms，建议1ms)**</li>
</ol>
<h3 id="pipeline（流水线）"><a href="#pipeline（流水线）" class="headerlink" title="pipeline（流水线）"></a><strong>pipeline（流水线）</strong></h3><p>一次网络时间，多条命令。节省网络传输时间</p>
<h3 id="redis持久化的取舍和选择"><a href="#redis持久化的取舍和选择" class="headerlink" title="redis持久化的取舍和选择"></a><strong>redis持久化的取舍和选择</strong></h3><h4 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a><strong>持久化方式</strong></h4><h6 id="快照（RDB）"><a href="#快照（RDB）" class="headerlink" title="快照（RDB）"></a><strong>快照（RDB）</strong></h6><p>​        例如：Redis RDB、Mysql Dump </p>
<h6 id="写日志（AOF）"><a href="#写日志（AOF）" class="headerlink" title="写日志（AOF）"></a><strong>写日志（AOF）</strong></h6><p>​        例如： Redis AOF、Mysql Binlog、Hbase Hlog</p>
<h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a><strong>RDB</strong></h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h5><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RDB.png" alt="RDB.png"></p>
<h5 id="触发机制的三种方式"><a href="#触发机制的三种方式" class="headerlink" title="触发机制的三种方式"></a><strong>触发机制的三种方式</strong></h5><h6 id="save-命令-同步"><a href="#save-命令-同步" class="headerlink" title="save 命令(同步)"></a><strong>save 命令(同步)</strong></h6><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RDB-save.png" alt="RDB-save.png"></p>
<ol>
<li><strong>数据量大的时候会阻塞</strong></li>
<li><strong>如存在老的RDB文件，新替换老</strong></li>
<li><strong>复杂度O(N)</strong></li>
</ol>
<h6 id="bgsave（异步）"><a href="#bgsave（异步）" class="headerlink" title="bgsave（异步）"></a><strong>bgsave（异步）</strong></h6><p>​    <img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/RDB-bgsave.png" alt="RDB-bgsave.png"></p>
<h6 id="save-和-bgsave-简单对比"><a href="#save-和-bgsave-简单对比" class="headerlink" title="save 和 bgsave 简单对比"></a><strong>save 和 bgsave 简单对比</strong></h6><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center"><strong>bgsave</strong></th>
<th align="center"><strong>save</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">IO类型</td>
<td align="center">异步</td>
<td align="center">同步</td>
</tr>
<tr>
<td align="center">阻塞</td>
<td align="center">是（阻塞发生在fork）</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">复杂度</td>
<td align="center">O(n)</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="center">优点</td>
<td align="center">不阻塞客户端命令</td>
<td align="center">不会消耗额外内存</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">需要fork，消耗内存</td>
<td align="center">阻塞客户端命令</td>
</tr>
</tbody></table>
<h6 id="最佳配置"><a href="#最佳配置" class="headerlink" title="最佳配置"></a><strong>最佳配置</strong></h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面 3 条 save 命令满足其中任何一个，都会执行 bgsave </span></span><br><span class="line">save 900 1 # 900秒内 改变超过 1条数据会执行 bgsave</span><br><span class="line">save 300 10  # 300秒内 改变超过 10条数据会执行 bgsave</span><br><span class="line">save 60 10000 # 60秒内 改变超过 10000条数据会执行 bgsave</span><br><span class="line">stop-writes-on-bgsave-error yes # bgsave 发生错误  停止写入</span><br><span class="line">rdbcompression yes # RDB文件是否采用压缩的格式</span><br><span class="line">rdbchecksum yes   # RDB文件是否检验</span><br><span class="line">dbfilename dump-$&#123;port&#125;.rdb # RDB文件名字</span><br></pre></td></tr></table></figure>

<h6 id="触发机制-不容忽略方式"><a href="#触发机制-不容忽略方式" class="headerlink" title="触发机制-不容忽略方式"></a><strong>触发机制-不容忽略方式</strong></h6><ol>
<li>全量复制 (比如主从复制的时候)</li>
<li>debug reload</li>
<li>shutdown （关闭的时候，有可能生成 RDB文件）</li>
</ol>
<h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h6><ol>
<li>RDB是Redis内存到硬盘的快照，用于持久化</li>
<li>save命令通常会阻塞Redis</li>
<li>bgsave不会阻塞Redis，但是会fork新的进程</li>
<li>save自动配置满足任一就会被执行</li>
<li>有些触发机制不容忽视</li>
</ol>
<h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a><strong>AOF</strong></h4><h5 id="AOF运行原理-创建-恢复"><a href="#AOF运行原理-创建-恢复" class="headerlink" title="AOF运行原理-创建/恢复"></a><strong>AOF运行原理-创建/恢复</strong></h5><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/D%EF%BC%9A%5Csqt%5Carticle%5Credis%5CAOF-%E5%88%9B%E5%BB%BA.png" alt="image-20200525183200381"></p>
<h5 id="三种策略"><a href="#三种策略" class="headerlink" title="三种策略"></a><strong>三种策略</strong></h5><h6 id="always"><a href="#always" class="headerlink" title="always"></a><strong>always</strong></h6><p>每个命令都会进行持久化，数据不会丢失</p>
<p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/AOF-always.png" alt="AOF-always.png"></p>
<h6 id="everysec"><a href="#everysec" class="headerlink" title="everysec"></a><strong>everysec</strong></h6><p>Redis的默认配置，每一秒执行一次持久化，最多丢失一秒的数据。    <img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/AOF-everysec.png" alt="AOF-everysec.png"></p>
<h6 id="no"><a href="#no" class="headerlink" title="no"></a><strong>no</strong></h6><p>由操作系统法国决定<img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/AOF-no.png" alt="AOF-no.png"></p>
<h6 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a><strong>优缺点</strong></h6><table>
<thead>
<tr>
<th align="center"><strong>命令</strong></th>
<th align="center"><strong>always</strong></th>
<th align="center"><strong>everysec</strong></th>
<th align="center"><strong>no</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td align="center">不丢失数据</td>
<td align="center">每秒fsync，有可能丢1秒数据</td>
<td align="center">不用管</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">IO开销比较大，一般的<br>sata盘只有几百TPS</td>
<td align="center">丢失一秒数据</td>
<td align="center">不可控</td>
</tr>
</tbody></table>
<h5 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a><strong>AOF重写</strong></h5><h6 id="AOF重写作用"><a href="#AOF重写作用" class="headerlink" title="AOF重写作用"></a><strong>AOF重写作用</strong></h6><ol>
<li>减少硬盘占用量</li>
<li>加速恢复速度</li>
</ol>
<h5 id="AOF实现的两种方式"><a href="#AOF实现的两种方式" class="headerlink" title="AOF实现的两种方式"></a><strong>AOF实现的两种方式</strong></h5><h6 id="bgrewriteaof"><a href="#bgrewriteaof" class="headerlink" title="bgrewriteaof"></a><strong>bgrewriteaof</strong></h6><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/AOF-bgwriteaof.png" alt="AOF-bgwriteaof.png"></p>
<h6 id="AOF重写配置"><a href="#AOF重写配置" class="headerlink" title="AOF重写配置"></a><strong>AOF重写配置</strong></h6><ol>
<li><p>配置</p>
<table>
<thead>
<tr>
<th align="center"><strong>配置名</strong></th>
<th align="center"><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">auto-aof-rewrite-min-size</td>
<td align="center">AOF文件重写需要的尺寸</td>
</tr>
<tr>
<td align="center">auto-aof-rewrite-percentage</td>
<td align="center">AOF文件增长率</td>
</tr>
</tbody></table>
</li>
<li><p>统计</p>
<table>
<thead>
<tr>
<th align="center"><strong>统计名</strong></th>
<th align="center"><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">aof_current_size</td>
<td align="center">AOF当前尺寸(单位：字节)</td>
</tr>
<tr>
<td align="center">aof_base_size</td>
<td align="center">AOF上次启动和重写的尺寸(单位：字节)</td>
</tr>
</tbody></table>
</li>
<li><p>AOF自动触发时机</p>
<ul>
<li>aof_current_size &gt; auto-aof-rewrite-min-size</li>
<li>(aof_current_size - aof_base_size)/aof_base_size &gt; auto-aof-rewrite-percentage</li>
</ul>
</li>
<li><p>AOF重写流程</p>
</li>
</ol>
<p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/AOF-%E9%87%8D%E5%86%99%E6%B5%81%E7%A8%8B.png" alt="AOF-重写流程.png"></p>
<h4 id="AOF和RDB对比"><a href="#AOF和RDB对比" class="headerlink" title="AOF和RDB对比"></a>AOF和RDB对比</h4><table>
<thead>
<tr>
<th align="center"><strong>命令</strong></th>
<th align="center"><strong>RDB</strong></th>
<th align="center"><strong>AOF</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">启动优先级</td>
<td align="center">低</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">体积</td>
<td align="center">小</td>
<td align="center">大</td>
</tr>
<tr>
<td align="center">恢复速度</td>
<td align="center">快</td>
<td align="center">慢</td>
</tr>
<tr>
<td align="center">数据安全性</td>
<td align="center">丢数据</td>
<td align="center">根据策略决定</td>
</tr>
<tr>
<td align="center">轻重</td>
<td align="center">重</td>
<td align="center">轻</td>
</tr>
</tbody></table>
<h5 id="RBD最佳策略"><a href="#RBD最佳策略" class="headerlink" title="RBD最佳策略"></a><strong>RBD最佳策略</strong></h5><ol>
<li>建议关掉RDB</li>
<li>集中管理</li>
<li>主从，从开</li>
</ol>
<p><strong>AOF最佳策略</strong></p>
<ol>
<li>建议开启(缓存和存出)</li>
<li>AOF重写集中管理</li>
<li>使用everysec</li>
</ol>
<h5 id="最佳策略"><a href="#最佳策略" class="headerlink" title="最佳策略"></a><strong>最佳策略</strong></h5><ol>
<li>小分片</li>
<li>缓存或者存储</li>
<li>监控(硬盘、内存、负载、网络)</li>
<li>足够的内存</li>
</ol>
<h4 id="运维常见问题"><a href="#运维常见问题" class="headerlink" title="运维常见问题"></a><strong>运维常见问题</strong></h4><h5 id="fork操作"><a href="#fork操作" class="headerlink" title="fork操作"></a><strong>fork操作</strong></h5><ol>
<li>同步操作</li>
<li>于内存量息息相关：内存越大，耗时越长(与机器类型有关)</li>
<li>info：lastest_fork_usec（查看fork执行的时间信息）</li>
</ol>
<h6 id="改善fork"><a href="#改善fork" class="headerlink" title="改善fork"></a><strong>改善fork</strong></h6><ol>
<li>优先使用 物理机或者高效支持fork操作的虚拟化技术</li>
<li>控制Redis实例最大可用内存：maxmemory</li>
<li>合理配置Linux内存分配策略： <code>vm.overcommit_ory=1</code></li>
<li>降低fork频率：例如放款AOF重写自动触发时机，不必要的全量赋值</li>
</ol>
<h5 id="子进程的开销和优化"><a href="#子进程的开销和优化" class="headerlink" title="子进程的开销和优化"></a><strong>子进程的开销和优化</strong></h5><h6 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a><strong>CPU</strong></h6><ul>
<li>开销： RDB和AOF文件生成，属于CPU密集型</li>
<li>优化：不做CPU绑定，不和CPU密集型的服务一块部署</li>
</ul>
<h6 id="内存"><a href="#内存" class="headerlink" title="内存"></a><strong>内存</strong></h6><ul>
<li>开销： fork内存开销， copy-on-write</li>
<li>优化：echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled（<strong>禁用透明大页功能</strong>）</li>
</ul>
<h5 id="AOF追加阻塞"><a href="#AOF追加阻塞" class="headerlink" title="AOF追加阻塞"></a><strong>AOF追加阻塞</strong></h5><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/AOF-%E8%BF%BD%E5%8A%A0%E9%98%BB%E5%A1%9E.png" alt="AOF-追加阻塞.png"></p>
<h6 id="AOF阻塞定位"><a href="#AOF阻塞定位" class="headerlink" title="AOF阻塞定位"></a><strong>AOF阻塞定位</strong></h6><ol>
<li><p>Redis日志</p>
<p>出现以下日志有可能出现AOF阻塞</p>
<p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/AOF%E9%98%BB%E5%A1%9E%E5%AE%9A%E4%BD%8D-redis%E6%97%A5%E5%BF%97.png" alt="AOF阻塞定位-redis日志.png"></p>
</li>
<li><p>命令：<code>info persistence</code></p>
<p><code>aof_delayed_fsync：100</code> ：表示累计阻塞的次数</p>
</li>
<li><p><code>top命令看硬盘情况</code></p>
</li>
</ol>
<h3 id="Redis复制的原理与优化"><a href="#Redis复制的原理与优化" class="headerlink" title="Redis复制的原理与优化"></a><strong>Redis复制的原理与优化</strong></h3><h4 id="主从复制两种实现方式"><a href="#主从复制两种实现方式" class="headerlink" title="主从复制两种实现方式"></a><strong>主从复制两种实现方式</strong></h4><h5 id="命令实现："><a href="#命令实现：" class="headerlink" title="命令实现："></a>命令实现：</h5><h6 id="开启-slaveof-ip-port"><a href="#开启-slaveof-ip-port" class="headerlink" title="开启 slaveof ip port"></a><strong>开启 <code>slaveof ip port</code></strong></h6><p>​                <strong>执行开启命令后，会把当前redis服务中的数据清楚，然后去复制主节点中的数据</strong></p>
<p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%91%BD%E4%BB%A4-%E5%BC%80%E5%90%AF.png" alt="主从复制-命令-开启.png"></p>
<h6 id="取消主从复制-slaveof-no-one"><a href="#取消主从复制-slaveof-no-one" class="headerlink" title="取消主从复制 slaveof no one"></a><strong>取消主从复制 <code>slaveof no one</code></strong></h6><p>执行命令后，<strong>6380端口不会把之前同步6379服务的数据清除</strong>，<strong>只是不会在同步6379后面写入的数据</strong>。</p>
<p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%91%BD%E4%BB%A4-%E5%8F%96%E6%B6%88.png" alt="主从复制-命令-取消.png"></p>
<h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a><strong>修改配置</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slaveof ip port</span><br><span class="line">slave-read-only yes #从节点只是读，不进行写的操作</span><br></pre></td></tr></table></figure>

<h5 id="两种方式比较"><a href="#两种方式比较" class="headerlink" title="两种方式比较"></a><strong>两种方式比较</strong></h5><table>
<thead>
<tr>
<th align="center"><strong>方式</strong></th>
<th align="center"><strong>命令</strong></th>
<th align="center"><strong>配置</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td align="center">不需要重启</td>
<td align="center">统一配置</td>
</tr>
<tr>
<td align="center">缺点</td>
<td align="center">不便于管理</td>
<td align="center">需要重启</td>
</tr>
</tbody></table>
<h4 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a><strong>全量复制</strong></h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h5><p>用于初次复制或其它无法进行部分复制的情况，将主节点中的所有数据都发送给从节点，是一个非常重型的操作，当数据量较大时，会对主从节点和网络造成很大的开销</p>
<h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a><strong>流程</strong></h5><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6.png" alt="全量复制.png"></p>
<h5 id="开销"><a href="#开销" class="headerlink" title="开销"></a><strong>开销</strong></h5><ol>
<li>bgsave时间</li>
<li>RDB文件网络传输时间</li>
<li>从节点清空数据时间</li>
<li>从节点加载RDB的时间</li>
<li>可能的AOF重写时间</li>
</ol>
<h4 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a><strong>部分复制</strong></h4><h5 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a><strong>概述</strong></h5><p>用于处理在主从复制中因网络闪断等原因造成的数据丢失场景，当从节点再次连上主节点后，如果条件允许，主节点会补发丢失数据给从节点。因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销，需要注意的是，如果网络中断时间过长，造成主节点没有能够完整地保存中断期间执行的写命令，则无法进行部分复制，仍使用全量复制</p>
<h5 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a><strong>流程</strong></h5><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E9%83%A8%E5%88%86%E5%A4%8D%E5%88%B6.png" alt="部分复制.png"></p>
<h4 id="开发运维中的问题"><a href="#开发运维中的问题" class="headerlink" title="开发运维中的问题"></a><strong>开发运维中的问题</strong></h4><h5 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a><strong>读写分离</strong></h5><h6 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h6><p>读流量分摊到从节点</p>
<h6 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h6><ol>
<li>复制数据延迟</li>
<li>读到过期的数据(redis3.2解决了该问题)</li>
<li>从节点故障</li>
</ol>
<h5 id="配置不一致-利用标准化工具安装可避免"><a href="#配置不一致-利用标准化工具安装可避免" class="headerlink" title="配置不一致(利用标准化工具安装可避免)"></a>配置不一致(利用标准化工具安装可避免)</h5><ol>
<li>例如<code>maxmemory</code>不一致，导致数据丢失</li>
<li>例如数据结构优化参数(例如hash-max-ziplist-entries)：内存不一致</li>
</ol>
<h5 id="规避全量复制"><a href="#规避全量复制" class="headerlink" title="规避全量复制"></a>规避全量复制</h5><h6 id="第一次全量复制："><a href="#第一次全量复制：" class="headerlink" title="第一次全量复制："></a>第一次全量复制：</h6><ul>
<li>第一次不可避免</li>
<li>在低峰的时候进行</li>
</ul>
<h6 id="节点运行ID不匹配"><a href="#节点运行ID不匹配" class="headerlink" title="节点运行ID不匹配"></a>节点运行ID不匹配</h6><ul>
<li>主节点重启(运行ID变化)</li>
<li>故障转移，例如哨兵、集群</li>
</ul>
<h6 id="复制积压缓冲区不足"><a href="#复制积压缓冲区不足" class="headerlink" title="复制积压缓冲区不足"></a>复制积压缓冲区不足</h6><ul>
<li>网络中断，部分复制无法满足</li>
<li>增大复制缓冲区配置<code>rel_backlog_size</code>，网络增强</li>
</ul>
<h5 id="复制风暴"><a href="#复制风暴" class="headerlink" title="复制风暴"></a>复制风暴</h5><h6 id="单主节点复制风暴"><a href="#单主节点复制风暴" class="headerlink" title="单主节点复制风暴"></a>单主节点复制风暴</h6><ul>
<li><p><strong>问题</strong>：主节点重启，多从节点复制</p>
</li>
<li><p><strong>解决</strong>：更换复制拓扑（读写分离有问题）</p>
<p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8D%95%E8%8A%82%E7%82%B9%E5%A4%8D%E5%88%B6%E9%A3%8E%E6%9A%B4.png" alt="单节点复制风暴.png"></p>
</li>
</ul>
<h6 id="单机器复制风暴（）"><a href="#单机器复制风暴（）" class="headerlink" title="单机器复制风暴（）"></a>单机器复制风暴（）</h6><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%8D%95%E6%9C%BA%E5%99%A8%E5%A4%8D%E5%88%B6%E9%A3%8E%E6%9A%B4.png" alt="单机器复制风暴.png"></p>
<h4 id="全量复制和部分复制相关问题"><a href="#全量复制和部分复制相关问题" class="headerlink" title="全量复制和部分复制相关问题"></a><strong>全量复制和部分复制相关问题</strong></h4><h5 id="redis什么时候会发生全量复制？"><a href="#redis什么时候会发生全量复制？" class="headerlink" title="redis什么时候会发生全量复制？"></a><strong>redis什么时候会发生全量复制？</strong></h5><ol>
<li>redis slave首启动或者重启后，连接到master时</li>
<li>redis slave进程没重启，但是掉线了，重连后不满足部分复制条件</li>
</ol>
<h5 id="redis什么时候会发生部分复制？"><a href="#redis什么时候会发生部分复制？" class="headerlink" title="redis什么时候会发生部分复制？"></a>redis什么时候会发生部分复制？</h5><p>先来看部分复制需要的条件</p>
<ol>
<li>主从的redis版本&gt;=2.8</li>
<li>redis slave进程没有重启，但是掉线了，重连了master(因为slave进程重启的话，run id就没有了)</li>
<li>redis slave保存的run id与master当前run id一致 (注：run id并不是pid，slave把它保存在内存中，重启就消失)</li>
<li>redis slave掉线期间，master保存在内存的offset可用，也就是master变化不大，被更改的指令都保存在内存</li>
</ol>
<h5 id="redis进程重启后会发生全量复制还是部分复制？"><a href="#redis进程重启后会发生全量复制还是部分复制？" class="headerlink" title="redis进程重启后会发生全量复制还是部分复制？"></a>redis进程重启后会发生全量复制还是部分复制？</h5><ol>
<li>master重启时，run id会发生变化</li>
<li>slave重启时，run id会丢失</li>
</ol>
<p><strong>答：很显然，会发生全量复制，因为部分复制的条件之一run id已经不能满足</strong></p>
<h5 id="当全量复制或者同步复制完毕，增量是如何更新到slave的？"><a href="#当全量复制或者同步复制完毕，增量是如何更新到slave的？" class="headerlink" title="当全量复制或者同步复制完毕，增量是如何更新到slave的？"></a>当全量复制或者同步复制完毕，增量是如何更新到slave的？</h5><p><strong>答：通过流式的命令更新，此时master就是slave的client，这样去理解。</strong></p>
<h5 id="run-id如何查看？"><a href="#run-id如何查看？" class="headerlink" title="run id如何查看？"></a>run id如何查看？</h5><p><strong>答：通过info server命令查看</strong></p>
<h3 id="Redis-Sentinel（哨兵）"><a href="#Redis-Sentinel（哨兵）" class="headerlink" title="Redis Sentinel（哨兵）"></a>Redis Sentinel（哨兵）</h3><h4 id="主从复制高可用问题"><a href="#主从复制高可用问题" class="headerlink" title="主从复制高可用问题"></a>主从复制高可用问题</h4><h5 id="手动故障转移-master出问题时要手动去处理"><a href="#手动故障转移-master出问题时要手动去处理" class="headerlink" title="手动故障转移(master出问题时要手动去处理)"></a>手动故障转移(master出问题时要手动去处理)</h5><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E6%89%8B%E5%8A%A8%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="主从复制-手动处理流程.png"></p>
<h5 id="写能力和存储能力受限"><a href="#写能力和存储能力受限" class="headerlink" title="写能力和存储能力受限"></a>写能力和存储能力受限</h5><h4 id="Redis-Sentinel故障转移流程"><a href="#Redis-Sentinel故障转移流程" class="headerlink" title="Redis Sentinel故障转移流程"></a>Redis Sentinel故障转移流程</h4><ol>
<li>多个sentinel发现并确认master有问题</li>
<li>选举出一个sentinel作为领导</li>
<li>选出一个slave作为master</li>
<li>通知其余slave成为新的master的slave</li>
<li>通知客户端主从变化</li>
<li>等待老的master复活成为新的master的slave</li>
</ol>
<h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><ol>
<li>配置开启主从节点</li>
<li>配置开启sentinel监控主节点(<strong>sentinel是特殊的redis，支持命令有限，本身不存储数据</strong>)</li>
<li>详细配置节点</li>
</ol>
<h4 id="三个定时任务"><a href="#三个定时任务" class="headerlink" title="三个定时任务"></a>三个定时任务</h4><h5 id="每10秒每个sentinel对master和slave节点执行info操作"><a href="#每10秒每个sentinel对master和slave节点执行info操作" class="headerlink" title="每10秒每个sentinel对master和slave节点执行info操作"></a>每10秒每个sentinel对master和slave节点执行<code>info</code>操作</h5><ol>
<li>发现slave节点</li>
<li>确认主从关系</li>
</ol>
<p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Redis-Sentinel-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.png" alt="Redis-Sentinel-第一个定时任务.png"></p>
<h5 id="每2秒每个sentinel通过master节点的channel交换信息-pub-sub"><a href="#每2秒每个sentinel通过master节点的channel交换信息-pub-sub" class="headerlink" title="每2秒每个sentinel通过master节点的channel交换信息(pub/sub)"></a>每2秒每个sentinel通过master节点的channel交换信息(pub/sub)</h5><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Redis-Sentinel-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.png" alt="Redis-Sentinel-第二个定时任务.png"></p>
<ol>
<li>通过<code>__sentinel__</code>：hello交互频道信息</li>
<li>交互对节点的”看法”和自身的信息</li>
</ol>
<h5 id="（重要的一个）每1秒每个Sentinel对其他的Sentinel和Redis执行Ping（心跳检测，失败判断依据）"><a href="#（重要的一个）每1秒每个Sentinel对其他的Sentinel和Redis执行Ping（心跳检测，失败判断依据）" class="headerlink" title="（重要的一个）每1秒每个Sentinel对其他的Sentinel和Redis执行Ping（心跳检测，失败判断依据）"></a>（重要的一个）每1秒每个Sentinel对其他的Sentinel和Redis执行Ping（心跳检测，失败判断依据）</h5><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Redis-Sentinel-%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.png" alt="Redis-Sentinel-第三个定时任务.png"></p>
<h4 id="主观下线和客观下线"><a href="#主观下线和客观下线" class="headerlink" title="主观下线和客观下线"></a>主观下线和客观下线</h4><h5 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h5><p>某个<code>sentinel</code>节点认为<code>Redis</code>节点不可用，’偏见’</p>
<h5 id="客观下线"><a href="#客观下线" class="headerlink" title="客观下线"></a>客观下线</h5><p>当Sentinel将一个<code>Redis</code>判断为主观下线之后，为了确定这个<code>Redis</code>是否真的下线了，它会向同样监视这个<code>Redis</code>的其它Sentinel进行询问，看它们是否也认为Master已经进入下线状态。当所有的<code>sentinel</code>节点对<code>Redis</code>节点失败”达成共识”(超过quorum个统一)，则该<code>Redis</code>节点客观下线</p>
<h4 id="领导者选举"><a href="#领导者选举" class="headerlink" title="领导者选举"></a>领导者选举</h4><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>只有一个sentinel几点完成故障转移</p>
<h5 id="选举"><a href="#选举" class="headerlink" title="选举"></a>选举</h5><h6 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h6><p>通过<code>sentinel is-master-down-by-addr</code>命令都希望成为领导者</p>
<h6 id="选举流程"><a href="#选举流程" class="headerlink" title="选举流程"></a>选举流程</h6><ol>
<li>每个做主观下线的Sentinel节点向其他Sentinel节点发送命令，要求将它设置为领导者</li>
<li>收到命令的Sentinel节点如果没有同意通过其他Sentinel节点发送的命令，那么将同意该请求，否则拒绝</li>
<li>如果该Sentinel节点发现自己的票数已经超过Sentinel集合半数且超过<code>quorum</code>，那么它将成为领导者</li>
<li>如果此过程有多个Sentinel节点成为了领导者 ，那么将等待一段时间重新进行选举。</li>
</ol>
<h4 id="Redis-Sentinel总结"><a href="#Redis-Sentinel总结" class="headerlink" title="Redis Sentinel总结"></a>Redis Sentinel总结</h4><ol>
<li>Redis Sentinel是Redis高可用的实现方案（故障发现、故障自动转移、配置中心、客户端通知）</li>
<li>尽可能的在不同的机器上部署Redis Sentinel节点</li>
<li>Redis Sentinel中Sentinel节点个数应该大于等于3，最好为奇数</li>
<li>Redis Sentinel中的数据节点与普通数据节点没有区别</li>
<li>客户端初始化链接的是Sentinel节点集合，不再是具体的Redis节点，但Sentinel只是配置中心不是代理</li>
<li>Redis Sentinel是通过三个定时任务实现了Sentinel节点对于主节点、从节点、其余Sentinel节点的监控</li>
<li>Redis Sentinel在对节点做失败判定时分为主观下线和客观下线</li>
<li>Redis Sentinel实现读写分离高可用可以依赖Sentinel节点的消息通知，获取Redis数据节点的状态变化</li>
</ol>
<h3 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h3><h4 id="虚拟槽分区"><a href="#虚拟槽分区" class="headerlink" title="虚拟槽分区"></a>虚拟槽分区</h4><ol>
<li>预设虚拟槽：每个槽映射一个数据子集，一般比节点数大</li>
<li>良好的哈希函数：例如 CRC16</li>
<li>服务端管理节点、槽、数据：例如Redis Cluster</li>
</ol>
<h4 id="客户端路由"><a href="#客户端路由" class="headerlink" title="客户端路由"></a>客户端路由</h4><h5 id="moved重定向"><a href="#moved重定向" class="headerlink" title="moved重定向"></a>moved重定向</h5><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/moved%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="moved重定向.png"></p>
<h6 id="槽命中：直接返回"><a href="#槽命中：直接返回" class="headerlink" title="槽命中：直接返回"></a>槽命中：直接返回</h6><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/moved-%E6%A7%BD%E5%91%BD%E4%B8%AD.png" alt="moved-槽命中.png"></p>
<h6 id="槽不命中：moved异常"><a href="#槽不命中：moved异常" class="headerlink" title="槽不命中：moved异常"></a>槽不命中：moved异常</h6><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/moved-%E6%A7%BD%E4%B8%8D%E5%91%BD%E4%B8%AD%E5%BC%82%E5%B8%B8.png" alt="moved-槽不命中异常.png"></p>
<h5 id="ASK重定向"><a href="#ASK重定向" class="headerlink" title="ASK重定向"></a>ASK重定向</h5><p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/ASK-%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="ASK-重定向.png"></p>
<h5 id="moved和ASK"><a href="#moved和ASK" class="headerlink" title="moved和ASK"></a>moved和ASK</h5><ul>
<li>两者都是客户单重定向</li>
<li>moved：槽已经确定迁移</li>
<li>ASK：槽还在迁移中</li>
</ul>
<h4 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h4><h5 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h5><ol>
<li><p>从集群中选一个可运行节点，使用 cluster slots初始化槽和节点映射</p>
</li>
<li><p>将cluser slots的结果映射到本地，为每个节点创建JedisPool</p>
</li>
<li><p>准备执行命令</p>
<p><img src="/2020/05/26/redis/redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Redis-cluster-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="Redis-cluster-客户端执行流程.png"></p>
</li>
</ol>
<h4 id="故障发现"><a href="#故障发现" class="headerlink" title="故障发现"></a>故障发现</h4><ul>
<li>通过ping/pong消息实现故障发现，<strong>不需要sentinel</strong></li>
<li>主观下线和客观下线</li>
</ul>
<h4 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h4><h5 id="资格检查"><a href="#资格检查" class="headerlink" title="资格检查"></a>资格检查</h5><ul>
<li>每个从节点检查与故障主节点的断线时间</li>
<li>超过<code>cluster-node-tit * cluster-slave-validity-facor</code>取消资格</li>
<li><code>cluster-slave-validity-factor</code>：默认为10</li>
</ul>
<h5 id="准备选举时间"><a href="#准备选举时间" class="headerlink" title="准备选举时间"></a>准备选举时间</h5><h5 id="选举投票"><a href="#选举投票" class="headerlink" title="选举投票"></a>选举投票</h5><h5 id="替换主节点"><a href="#替换主节点" class="headerlink" title="替换主节点"></a>替换主节点</h5><ul>
<li>当前从节点取消复制变为主节点。（<code>slaveof no one</code>）</li>
<li>执行<code>clusterDelSlot</code>撤销故障主节点负责的槽，并执行<code>clusterAddSlot</code>把这些槽分配给自己</li>
<li>向集群广播自己的ponmg消息，表明已经替换了故障主节点</li>
</ul>
<h4 id="Redis-Cluster开发运维常见问题"><a href="#Redis-Cluster开发运维常见问题" class="headerlink" title="Redis Cluster开发运维常见问题"></a>Redis Cluster开发运维常见问题</h4><h5 id="集群完整性"><a href="#集群完整性" class="headerlink" title="集群完整性"></a>集群完整性</h5><ul>
<li><code>cluster-require-full-coverage</code>默认为yes：表示集群所有节点正常才提供服务</li>
<li>多数业务无法容忍，建议<code>cluster-require-full-coverage</code>设置为<strong>no</strong></li>
</ul>
<h5 id="带宽消耗"><a href="#带宽消耗" class="headerlink" title="带宽消耗"></a>带宽消耗</h5><ul>
<li><p>Ping/Pong消息</p>
</li>
<li><p>官方建议节点不要超过1000个</p>
<h6 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h6><ul>
<li>避免多个业务使用一个大集群</li>
<li><code>cluster-node-timeout</code>：带宽和故障转移速度的均衡</li>
<li>尽量均匀分配到多机器上：保证高可用和带宽</li>
</ul>
</li>
</ul>
<h5 id="Pub-Sub广播"><a href="#Pub-Sub广播" class="headerlink" title="Pub/Sub广播"></a>Pub/Sub广播</h5><h6 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h6><p>publish在集群每个节点广播：加重带宽</p>
<h6 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h6><p>单独”走”一套Redis Sentinel</p>
<h5 id="集群倾斜"><a href="#集群倾斜" class="headerlink" title="集群倾斜"></a>集群倾斜</h5><h6 id="数据倾斜：内存不均匀"><a href="#数据倾斜：内存不均匀" class="headerlink" title="数据倾斜：内存不均匀"></a>数据倾斜：内存不均匀</h6><ul>
<li>节点和槽分配不均匀</li>
<li>不同槽对应键值数量差异较大</li>
<li>包含bigkey(可在从节点执行<code>redis-cli --bigkeys</code>查找)</li>
<li>内存相关配置不一致</li>
</ul>
<h6 id="请求倾斜"><a href="#请求倾斜" class="headerlink" title="请求倾斜"></a>请求倾斜</h6><ul>
<li>热点key或者bigkey</li>
</ul>
<h5 id="集群读写分离"><a href="#集群读写分离" class="headerlink" title="集群读写分离"></a>集群读写分离</h5><h6 id="只读链接"><a href="#只读链接" class="headerlink" title="只读链接"></a>只读链接</h6><p>集群模式的从节点不接受任何读写请求</p>
<ul>
<li>读取数据时会重定向负责槽的主节点</li>
<li><code>readonly</code>命令可以在从节点上读，但是这是链接级别的命令</li>
</ul>
<h6 id="读写分离（较复杂，cluster模式下不建议使用）"><a href="#读写分离（较复杂，cluster模式下不建议使用）" class="headerlink" title="读写分离（较复杂，cluster模式下不建议使用）"></a>读写分离（较复杂，cluster模式下不建议使用）</h6><h5 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h5><h6 id="官方迁移工具-redis-tribrb-import"><a href="#官方迁移工具-redis-tribrb-import" class="headerlink" title="官方迁移工具(redis-tribrb import)"></a>官方迁移工具(redis-tribrb import)</h6><ul>
<li>只能从单机迁移到集群</li>
<li>不支持在线迁移：source需要停写</li>
<li>不支持断点续传</li>
<li>单线程迁移：影响速度</li>
</ul>
<center><h3>欢迎扫码关注</h3></center>

<blockquote>
<p> 如果喜欢请关注我公众号【程序倾听者】，说出你的故事！我在这里倾听！</p>
<p> <img src="/images/public-wechat.jpg" alt></p>
</blockquote>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Java后端</tag>
      </tags>
  </entry>
</search>
