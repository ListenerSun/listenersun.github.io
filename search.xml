<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot2.X+MybatisPlus+多数据源+事务</title>
    <url>/2020/05/14/SpringBoot2/</url>
    <content><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><ol>
<li><strong>项目中用不用多数据源是一回事，你自己会不会又是另一回事。</strong></li>
<li><strong>SpringBoot2.0.8版本整合MybatisPlus实现多数据源很简单，但是事务总是不生效？</strong></li>
<li><strong>MybatisPlus提供了多数据源插件(<a href="https://mp.baomidou.com/guide/dynamic-datasource.html" target="_blank" rel="noopener" title="With a Title">链接</a>)，我可不可以不用?</strong></li>
<li><strong>其实多数据源挺好配的，就是事务一直不生效。今天终于解决了。</strong><a id="more"></a>

</li>
</ol>
<h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构:"></a>项目结构:</h5><p><img src="/2020/05/14/SpringBoot2/1.jpg" alt="xxx"></p>
<p>主要的配置类就是这五个: DsAspect、 DataSourceConfiguration 、MyRoutingDataSource、MybatisConfiguration、TransactionConfig。后面我逐个的解释下每个类的作用。</p>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件:"></a><strong>配置文件:</strong></h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据源配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">defaultDs:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">master</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:3306/wx_edu?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="attr">initial-size:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="string">version()</span></span><br><span class="line">        <span class="attr">validation-query-timeout:</span> <span class="number">10000</span></span><br><span class="line">        <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">remove-abandoned:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">remove-abandoned-timeout:</span> <span class="number">86400</span></span><br><span class="line">        <span class="attr">filters:</span> <span class="string">stat,wall</span></span><br><span class="line">        <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql=true;</span></span><br><span class="line">        <span class="attr">web-stat-filter:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">          <span class="attr">exclusions:</span> <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span></span><br><span class="line">        <span class="attr">stat-view-servlet:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">          <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">          <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">filter:</span></span><br><span class="line">          <span class="attr">stat:</span></span><br><span class="line">            <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">            <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">wall:</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">              <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># slave 数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">slave</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:3307/wx_edu?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">        <span class="comment">#连接参数</span></span><br><span class="line">        <span class="attr">initial-size:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="string">version()</span></span><br><span class="line">        <span class="attr">validation-query-timeout:</span> <span class="number">10000</span></span><br><span class="line">        <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">remove-abandoned:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">remove-abandoned-timeout:</span> <span class="number">86400</span></span><br><span class="line">        <span class="attr">filters:</span> <span class="string">stat,wall</span></span><br><span class="line">        <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql=true;</span></span><br><span class="line">        <span class="attr">web-stat-filter:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">          <span class="attr">exclusions:</span> <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span></span><br><span class="line">        <span class="attr">stat-view-servlet:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">          <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">          <span class="attr">login-password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">filter:</span></span><br><span class="line">          <span class="attr">stat:</span></span><br><span class="line">            <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">            <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">wall:</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">              <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="comment">#主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";</span></span><br><span class="line">    <span class="attr">id-type:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">#字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"</span></span><br><span class="line">    <span class="attr">field-strategy:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">#驼峰下划线转换</span></span><br><span class="line">    <span class="attr">db-column-underline:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#刷新mapper 调试神器</span></span><br><span class="line">    <span class="attr">refresh-mapper:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#数据库大写下划线转换</span></span><br><span class="line">    <span class="comment">#capital-mode: true</span></span><br><span class="line">    <span class="comment">#逻辑删除配置（下面3个配置）</span></span><br><span class="line">    <span class="attr">logic-delete-value:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">logic-not-delete-value:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># SQL 解析缓存，开启后多租户 @SqlParser 注解生效</span></span><br><span class="line">  <span class="comment">#    sql-parser-cache: true</span></span><br></pre></td></tr></table></figure>

<h6 id="DataSourceConfiguration"><a href="#DataSourceConfiguration" class="headerlink" title="DataSourceConfiguration:"></a>DataSourceConfiguration:</h6><p> 主要是配置多个数据源的Bean，上代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认是数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.druid.defaultDs&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String defaultDs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSourceMaster"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid.master"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourceMaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource druidDataSource = DruidDataSourceBuilder.create().build();</span><br><span class="line">        DbContextHolder.addDataSource(CommonEnum.DsType.DS_MASTER.getValue(), druidDataSource);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSourceSlave"</span>)</span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource.druid.slave"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSourceSlave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource druidDataSource = DruidDataSourceBuilder.create().build();</span><br><span class="line">        DbContextHolder.addDataSource(CommonEnum.DsType.DS_SLAVE.getValue(), druidDataSource);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"myRoutingDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyRoutingDataSource <span class="title">dataSource</span><span class="params">(@Qualifier(<span class="string">"dataSourceMaster"</span>)</span> DataSource dataSourceMaster, @<span class="title">Qualifier</span><span class="params">(<span class="string">"dataSourceSlave"</span>)</span> DataSource dataSourceSlave) </span>&#123;</span><br><span class="line">        MyRoutingDataSource dynamicDataSource = <span class="keyword">new</span> MyRoutingDataSource();</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataResources = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        targetDataResources.put(CommonEnum.DsType.DS_MASTER.getValue(), dataSourceMaster);</span><br><span class="line">        targetDataResources.put(CommonEnum.DsType.DS_SLAVE.getValue(), dataSourceSlave);</span><br><span class="line">        <span class="comment">//设置默认数据源</span></span><br><span class="line">        dynamicDataSource.setDefaultTargetDataSource(dataSourceMaster);</span><br><span class="line">        dynamicDataSource.setTargetDataSources(targetDataResources);</span><br><span class="line">        DbContextHolder.setDefaultDs(defaultDs);</span><br><span class="line">        <span class="keyword">return</span> dynamicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个没啥好解释的，就是把配置文件封装成了dataSource的Bean，其中<code>MyRoutingDataSource</code>才是我们要用的数据源，包括事务配置也要用它。</p>
<p> <strong>MyRoutingDataSource</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DbContextHolder.getCurrentDsStr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>AbstractRoutingDataSource</code>是Spring的jdbc模块下提供的一个抽象类，该类充当了<code>DataSource</code>的路由中介, 能在运行时, 根据某种key值来动态切换到真正的<code>DataSource</code>上，重写其中的<code>determineCurrentLookupKey()</code>方法，可以实现数据源的切换。意思就是想玩多数据源就使用这个类就对了。我这里还用到了一个<code>DbContextHolder</code>工具类(相当于数据源的持有者)，代码如下，基本上是在网上拷贝的，其中做了一点点修改:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbContextHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目中配置数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, DataSource&gt; dataSources = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String defaultDs = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为什么要用链表存储(准确的是栈)</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * 为了支持嵌套切换，如ABC三个service都是不同的数据源</span></span><br><span class="line"><span class="comment">     * 其中A的某个业务要调B的方法，B的方法需要调用C的方法。一级一级调用切换，形成了链。</span></span><br><span class="line"><span class="comment">     * 传统的只设置当前线程的方式不能满足此业务需求，必须模拟栈，后进先出。</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Deque&lt;String&gt;&gt; contextHolder = <span class="keyword">new</span> ThreadLocal() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayDeque();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前线程使用的数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dsName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCurrentDsStr</span><span class="params">(String dsName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(dsName)) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;dbType is null,throw NullPointerException"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!dataSources.containsKey(dsName)) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;datasource not exists,dsName=&#123;&#125;"</span>, dsName);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"==========&gt;datasource not exists,dsName=&#123;"</span> + dsName +<span class="string">"&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        contextHolder.get().push(dsName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前使用的数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCurrentDsStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contextHolder.get().peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空当前线程数据源</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 如果当前线程是连续切换数据源</span></span><br><span class="line"><span class="comment">     * 只会移除掉当前线程的数据源名称</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearCurrentDsStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Deque&lt;String&gt; deque = contextHolder.get();</span><br><span class="line">        deque.poll();</span><br><span class="line">        <span class="keyword">if</span> (deque.isEmpty())&#123;</span><br><span class="line">            contextHolder.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dsName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addDataSource</span><span class="params">(String dsName, DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSources.containsKey(dsName)) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;dataSource=&#123;&#125; already exist"</span>, dsName);</span><br><span class="line">            <span class="comment">//throw new RuntimeException("dataSource=&#123;" + dsName + "&#125; already exist");</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dataSources.put(dsName, dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDefaultDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(defaultDs)) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;default datasource must be configured"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"default datasource must be configured."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!dataSources.containsKey(defaultDs)) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;The default datasource must be included in the datasources"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"==========&gt;The default datasource must be included in the datasources"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSources.get(defaultDs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 设置默认数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defaultDsStr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefaultDs</span><span class="params">(String defaultDsStr)</span> </span>&#123;</span><br><span class="line">        defaultDs = defaultDsStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**获取所有 数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, DataSource&gt; <span class="title">getDataSources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDefaultDs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defaultDs;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="MybatisConfiguration："><a href="#MybatisConfiguration：" class="headerlink" title="MybatisConfiguration："></a>MybatisConfiguration：</h6><p>这是MybatisPlus配置类，如果你用的是Mybatis要简单一点。因为Mybatis只需要配置<code>SqlSessionFactory</code>，而 MybatisPlus是配置<code>MybatisSqlSessionFactoryBean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123;DataSourceConfiguration<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">MapperScan</span>(<span class="title">basePackages</span> </span>= &#123;<span class="string">"com.sqt.edu.*.mapper*"</span>,<span class="string">"com.sqt.edu.*.api.mapper*"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(@Qualifier(value = <span class="string">"myRoutingDataSource"</span>)</span> MyRoutingDataSource myRoutingDataSource) <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">            Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(myRoutingDataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"mybatisSqlSessionFactoryBean"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisSqlSessionFactoryBean <span class="title">sqlSessionFactoryBean</span><span class="params">(@Qualifier(value = <span class="string">"myRoutingDataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"==========&gt;开始注入 MybatisSqlSessionFactoryBean"</span>);</span><br><span class="line">        MybatisSqlSessionFactoryBean bean = <span class="keyword">new</span> MybatisSqlSessionFactoryBean();</span><br><span class="line">        Set&lt;Resource&gt; result = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        PathMatchingResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result.addAll(Arrays.asList(resolver.getResources(<span class="string">"classpath*:mapper/*.xml"</span>)));</span><br><span class="line">            result.addAll(Arrays.asList(resolver.getResources(<span class="string">"classpath*:config/mapper/*/*.xml"</span>)));</span><br><span class="line">            result.addAll(Arrays.asList(resolver.getResources(<span class="string">"classpath*:mapper/*/*.xml"</span>)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"获取【classpath:mapper/*/*.xml,classpath:config/mapper/*/*.xml】资源错误!异常信息:&#123;&#125;"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        bean.setMapperLocations(result.toArray(<span class="keyword">new</span> org.springframework.core.io.Resource[<span class="number">0</span>]));</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        bean.setVfs(SpringBootVFS<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        com.baomidou.mybatisplus.core.MybatisConfiguration configuration = <span class="keyword">new</span> com.baomidou.mybatisplus.core.MybatisConfiguration();</span><br><span class="line">        configuration.setLogImpl(StdOutImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//添加 乐观锁插件</span></span><br><span class="line">        configuration.addInterceptor(optimisticLockerInterceptor());</span><br><span class="line">        bean.setConfiguration(configuration);</span><br><span class="line">        GlobalConfig globalConfig = GlobalConfigUtils.defaults();</span><br><span class="line">        <span class="comment">//设置 字段自动填充处理</span></span><br><span class="line">        globalConfig.setMetaObjectHandler(<span class="keyword">new</span> MyMetaObjectHandler());</span><br><span class="line">        bean.setGlobalConfig(globalConfig);</span><br><span class="line">        log.info(<span class="string">"==========&gt;注入 MybatisSqlSessionFactoryBean 完成!"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这里配置的<code>SqlSessionFactory</code>和<code>MybatisSqlSessionFactoryBean</code>都需要<code>MyRoutingDataSource</code>这个数据源。</strong></p>
<h6 id="DsAspect："><a href="#DsAspect：" class="headerlink" title="DsAspect："></a>DsAspect：</h6><p>数据源切换切面配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Order</span>(<span class="number">0</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DsAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置AOP切面的切入点</span></span><br><span class="line"><span class="comment">     * 切换放在service接口的方法上</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sqt..service..*Service.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataSourcePointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据切点信息获取调用函数是否用TargetDataSource切面注解描述，</span></span><br><span class="line"><span class="comment">     * 如果设置了数据源，则进行数据源切换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"dataSourcePointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(DbContextHolder.getCurrentDsStr())) &#123;</span><br><span class="line">            log.info(<span class="string">"==========&gt;current thread &#123;&#125; use dataSource[&#123;&#125;]"</span>,</span><br><span class="line">                    Thread.currentThread().getName(), DbContextHolder.getCurrentDsStr());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String method = joinPoint.getSignature().getName();</span><br><span class="line">        Method m = ((MethodSignature) joinPoint.getSignature()).getMethod();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != m &amp;&amp; m.isAnnotationPresent(DS<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                <span class="comment">// 根据注解 切换数据源</span></span><br><span class="line">                DS td = m.getAnnotation(DS<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                String dbStr = td.value();</span><br><span class="line">                DbContextHolder.setCurrentDsStr(dbStr);</span><br><span class="line">                log.info(<span class="string">"==========&gt;current thread &#123;&#125; add dataSource[&#123;&#125;] to ThreadLocal, request method name is : &#123;&#125;"</span>,</span><br><span class="line">                        Thread.currentThread().getName(), dbStr, method);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                DbContextHolder.setCurrentDsStr(DbContextHolder.getDefaultDs());</span><br><span class="line">                log.info(<span class="string">"==========&gt;use default datasource[&#123;&#125;] , request method name is :  &#123;&#125;"</span>,</span><br><span class="line">                        DbContextHolder.getDefaultDs(), method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"==========&gt;current thread &#123;&#125; add data to ThreadLocal error,&#123;&#125;"</span>, Thread.currentThread().getName(), e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行完切面后，将线程共享中的数据源名称清空，</span></span><br><span class="line"><span class="comment">     * 数据源恢复为原来的默认数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"dataSourcePointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"==========&gt;clean datasource[&#123;&#125;]"</span>, DbContextHolder.getCurrentDsStr());</span><br><span class="line">        DbContextHolder.clearCurrentDsStr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类就是一个简单的切面配置，作用就是在Service方法之前切换数据源，自定义一个<code>DS()</code>注解,作用到Service方法上并且标明是master还是slave即可。</p>
<h6 id="事务配置"><a href="#事务配置" class="headerlink" title="事务配置:"></a>事务配置:</h6><p><strong>重点来了！重点来了!经过上面那些配置，多数据源已经配置好了。但是此时事务是不生效的，无论你是把<code>@Transactional</code>作用到Service类上还是方法上，都不生效!此时你还需要配置一个事务管理器，并且把<code>MyRoutingDataSource</code>我们自定义的数据源给事务管理器。看TransactionConfig:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ConfigurableApplicationContext applicationContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TX_METHOD_TIMEOUT = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_POINTCUT_EXPRESSION = <span class="string">"execution(*com.sqt..service..*Service.*(..))"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"txAdvice"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionInterceptor <span class="title">txAdvice</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        NameMatchTransactionAttributeSource source = <span class="keyword">new</span> NameMatchTransactionAttributeSource();</span><br><span class="line">        <span class="comment">// 只读事务，不做更新操作</span></span><br><span class="line">        RuleBasedTransactionAttribute readOnlyTx = <span class="keyword">new</span> RuleBasedTransactionAttribute();</span><br><span class="line">        readOnlyTx.setReadOnly(<span class="keyword">true</span>);</span><br><span class="line">        readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务</span></span><br><span class="line">        RuleBasedTransactionAttribute requiredTx = <span class="keyword">new</span> RuleBasedTransactionAttribute();</span><br><span class="line">        requiredTx.setRollbackRules(Collections.singletonList(<span class="keyword">new</span> RollbackRuleAttribute(Exception<span class="class">.<span class="keyword">class</span>)))</span>;</span><br><span class="line">        requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class="line">        requiredTx.setTimeout(TX_METHOD_TIMEOUT);</span><br><span class="line">        Map&lt;String, TransactionAttribute&gt; txMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        txMap.put(<span class="string">"add*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"save*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"insert*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"create*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"update*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"batch*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"modify*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"delete*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"remove*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"exec*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"set*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"do*"</span>, requiredTx);</span><br><span class="line">        txMap.put(<span class="string">"get*"</span>, readOnlyTx);</span><br><span class="line">        txMap.put(<span class="string">"query*"</span>, readOnlyTx);</span><br><span class="line">        txMap.put(<span class="string">"find*"</span>, readOnlyTx);</span><br><span class="line">        txMap.put(<span class="string">"*"</span>, requiredTx);</span><br><span class="line">        source.setNameMap(txMap);</span><br><span class="line">        TransactionInterceptor txAdvice = <span class="keyword">new</span> TransactionInterceptor(transactionManager(), source);</span><br><span class="line">        <span class="keyword">return</span> txAdvice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Advisor <span class="title">txAdviceAdvisor</span><span class="params">(@Qualifier(<span class="string">"txAdvice"</span>)</span> TransactionInterceptor txAdvice) </span>&#123;</span><br><span class="line">        AspectJExpressionPointcut pointcut = <span class="keyword">new</span> AspectJExpressionPointcut();</span><br><span class="line">        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(pointcut, txAdvice);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**自定义 事务管理器 管理我们自定义的 MyRoutingDataSource 数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"transactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager(applicationContext.getBean(MyRoutingDataSource<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置DataSourceTransactionManager是重点! ! ! 配置DataSourceTransactionManager是重点! ! !</strong></p>
<p>由于我是自定义的切面配置事务，所以这个代码略长。重点是配置事务管理器，并且把我们动态路由数据源(MyRoutingDataSource)交给事务管理器，这样我们的事务才会回滚！</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h5><ol>
<li>配置多数据源的重点是自定义一个数据源继承<code>AbstractRoutingDataSource</code>，并将多个数据源注册进去。</li>
<li>事务不生效原因是Spring的默认事务管理器没有接管我们自定义的数据源.解决方法是配置一个事务管理器将我们自定义的数据源塞给它</li>
</ol>
]]></content>
      <categories>
        <category>Java后端</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>这就算第一个Listener的夜晚吧</title>
    <url>/2020/05/16/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-05-16/</url>
    <content><![CDATA[<h3 id="为什么这算是第一个Listener的夜晚？"><a href="#为什么这算是第一个Listener的夜晚？" class="headerlink" title="为什么这算是第一个Listener的夜晚？"></a>为什么这算是第一个Listener的夜晚？</h3><p>已经记不清是有多少个夜晚，所以今天就算是第一个夜晚吧！貌似踏上卖码为生的道路之后就跟夜晚结下了深厚的友谊！一个带有深邃眼神的男子坐在出租屋里，终于把自己的博客初步完善！或许这是结束，或许这又是一个开始！</p>
<p><img src="/2020/05/16/listener%E7%9A%84%E5%A4%9C%E6%99%9A/2020-05-16/1.jpg" alt="listener"></p>
<p>高楼万丈，灯火阑珊！哪一盏灯是为你点亮？而你又点亮了哪一盏灯？无论黑夜有多黑，第二天早上都要对世界说声：“世界，你好！”</p>
]]></content>
      <categories>
        <category>Listener的夜晚</category>
      </categories>
      <tags>
        <tag>Listener的夜晚</tag>
        <tag>生活随笔</tag>
      </tags>
  </entry>
</search>
